{"version":3,"file":"static/js/7466.a9b12a94.chunk.js","mappings":"oNAIA,MAAMA,EAAO,CACXC,SAAUC,uFACVC,OAAQD,sFACRE,YAAaF,0FACbG,YAAaH,0FACbI,IAAKJ,kFACLK,OAAQL,qFACRM,aAAcN,6FAGHO,EAAcC,IAAkD,IAAjD,UAAEC,EAAY,GAAE,oBAAEC,EAAsB,GAAGF,EACrE,MAAM,MAAEG,IAAUC,EAAAA,EAAAA,KAEZC,EAAmBC,KAAKC,IAAI,EAAGL,GAE/BM,GAASC,EAAAA,EAAAA,SAAQ,SAAAC,EAAA,OAAqB,QAArBA,EAAMpB,EAAKW,UAAU,IAAAS,EAAAA,EAAI,IAAI,CAACT,KAC/C,KAAEU,EAAI,OAAEC,IAAWC,EAAAA,EAAAA,GAASL,IAElCM,EAAAA,EAAAA,WAAU,KACJF,GAAU,KACZT,EAAM,CACJY,KAAM,QACNC,MAAO,+CACPC,QAAS,KAGZ,CAACL,EAAQT,IAEZ,MAAMe,GAAQT,EAAAA,EAAAA,SAAQ,IAAOU,MAAMC,QAAQT,GAAQA,EAAO,GAAK,CAACA,KAEzDU,EAAcC,IAAmBC,EAAAA,EAAAA,UAASlB,IAC1CmB,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,GAEzCG,GAAajB,EAAAA,EAAAA,SACjB,IAAMH,KAAKC,IAAI,EAAGD,KAAKqB,KAAKT,EAAMU,OAASP,IAC3C,CAACH,EAAMU,OAAQP,IAGXQ,GAAapB,EAAAA,EAAAA,SAAQ,IAAMU,MAAMW,KAAK,CAAEF,OAAQF,GAAc,CAACK,EAAGC,IAAMA,GAAI,CAACN,IAE7EO,GAAexB,EAAAA,EAAAA,SAAQ,KAC3B,MAAMyB,EAAQV,EAAcH,EACtBc,EAAM7B,KAAK8B,IAAIF,EAAQb,EAAcH,EAAMU,QACjD,OAAOV,EAAMmB,MAAMH,EAAOC,IACzB,CAACjB,EAAOM,EAAaH,IAElBiB,GAAWC,EAAAA,EAAAA,aACdC,GAAcf,EAAenB,KAAKC,IAAI,EAAGD,KAAK8B,IAAII,EAAWd,EAAa,KAC3E,CAACA,IAEGe,GAASF,EAAAA,EAAAA,aAAY,IAAMD,EAASd,EAAc,GAAI,CAACA,EAAac,IACpEI,GAASH,EAAAA,EAAAA,aAAY,IAAMD,EAASd,EAAc,GAAI,CAACA,EAAac,IAEpEK,GAAclC,EAAAA,EAAAA,SAAQ,IAAMoB,EAAWe,IAAI,CAACb,EAAGC,IAAMA,IAAMR,GAAc,CAACK,EAAYL,IAE5F,MAAO,CACLN,QACA2B,WAAY,CACVxB,eACAC,kBACAE,cACAE,aACAG,aACAI,eACAU,cACAL,WACAG,SACAC,W,+FCpEN,MAAMI,GAAmBC,EAAAA,EAAAA,MAAK,IAAM,gCAEvBC,EAAWhD,IAAqC,IAApC,SAAEiD,EAAQ,OAAEC,EAAM,SAAEC,GAAUnD,EACrD,MAAM,MAAEkB,EAAK,WAAE2B,IAAe9C,EAAAA,EAAAA,GAAY,CAAEE,UAAUgD,EAASG,MAGzDC,GAAc5C,EAAAA,EAAAA,SAAQ,IAAMwC,EAASG,IAAIE,OAAO,GAAGC,cAAgBN,EAASG,IAAIf,MAAM,GAAI,CAACY,EAASG,MAI1G,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAACV,EAAgB,CAAC7C,UAAWgD,EAASG,IAAKO,MAAOV,EAASU,MAAOzC,MAAOA,EAAO0C,aAAcX,EAASW,aAAcP,YAAaA,EAAaR,WAAYA,EAAYK,OAAQA,EAAQC,SAAUA,EAAUM,UAAW,6EAK5N,GAAeI,EAAAA,EAAAA,MAAKb,E","sources":["components/forms/dropdown/useDropdown.js","components/forms/dropdown/Dropdown.js"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../../../hooks/useFetch.js\";\r\n\r\nconst apis = {\r\n  paciente: process.env.REACT_APP_API_PACIENTES,\r\n  doctor: process.env.REACT_APP_API_DOCTORES,\r\n  consultorio: process.env.REACT_APP_API_CONSULTORIOS,\r\n  tratamiento: process.env.REACT_APP_API_TRATAMIENTOS,\r\n  eps: process.env.REACT_APP_API_EPSS,\r\n  genero: process.env.REACT_APP_API_GENEROS,\r\n  especialidad: process.env.REACT_APP_API_ESPECIALIDADES,\r\n};\r\n\r\nexport const useDropdown = ({ classType = \"\", itemsPerPageInitial = 5 }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  const safeItemsPerPage = Math.max(1, itemsPerPageInitial);\r\n\r\n  const urlApi = useMemo(() => apis[classType] ?? \"\", [classType]);\r\n  const { data, status } = useFetch(urlApi);\r\n\r\n  useEffect(() => {\r\n    if (status >= 400) {\r\n      alert({\r\n        type: \"error\",\r\n        title: \"Error en la conexiÃ³n con la base de datos\",\r\n        buttons: 1,\r\n      });\r\n    }\r\n  }, [status, alert]);\r\n\r\n  const array = useMemo(() => (Array.isArray(data) ? data : []), [data]);\r\n\r\n  const [itemsPerPage, setItemsPerPage] = useState(safeItemsPerPage);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  const totalPages = useMemo(\r\n    () => Math.max(1, Math.ceil(array.length / itemsPerPage)),\r\n    [array.length, itemsPerPage]\r\n  );\r\n\r\n  const indexPages = useMemo(() => Array.from({ length: totalPages }, (_, i) => i), [totalPages]);\r\n\r\n  const currentItems = useMemo(() => {\r\n    const start = currentPage * itemsPerPage;\r\n    const end = Math.min(start + itemsPerPage, array.length);\r\n    return array.slice(start, end);\r\n  }, [array, currentPage, itemsPerPage]);\r\n\r\n  const goToPage = useCallback(\r\n    (pageIndex) => setCurrentPage(Math.max(0, Math.min(pageIndex, totalPages - 1))),\r\n    [totalPages]\r\n  );\r\n  const goPrev = useCallback(() => goToPage(currentPage - 1), [currentPage, goToPage]);\r\n  const goNext = useCallback(() => goToPage(currentPage + 1), [currentPage, goToPage]);\r\n\r\n  const activePages = useMemo(() => indexPages.map((_, i) => i === currentPage), [indexPages, currentPage]);\r\n\r\n  return {\r\n    array,\r\n    pagination: {\r\n      itemsPerPage,\r\n      setItemsPerPage,\r\n      currentPage,\r\n      totalPages,\r\n      indexPages,\r\n      currentItems,\r\n      activePages,\r\n      goToPage,\r\n      goPrev,\r\n      goNext,\r\n    },\r\n  };\r\n};\r\n\r\nexport default useDropdown;\r\n","import  { lazy, memo, useMemo } from 'react'\r\nimport { useDropdown } from './useDropdown.js';\r\n\r\nconst DropdownSelector = lazy(() => import('./DropdownSelector.js'));\r\n\r\nexport const Dropdown = ({ property, isOpen, onToggle }) => {\r\n  const { array, pagination } = useDropdown({ classType:property.key });\r\n\r\n  // ðŸ‘‡ Memoriza placeholder para evitar recalcularlo en cada render\r\n  const placeholder = useMemo(() => property.key.charAt(0).toUpperCase() + property.key.slice(1), [property.key]);\r\n\r\n  if( process.env.NODE_ENV === 'development' ) { console.log('[Dropdown]') }\r\n\r\n  return (\r\n    <div className='col px-0'>\r\n      <DropdownSelector classType={property.key} value={property.value} array={array} handleChange={property.handleChange} placeholder={placeholder} pagination={pagination} isOpen={isOpen} onToggle={onToggle} className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Dropdown);\r\n\r\n// // ðŸ‘‡ memo para evitar re-render si props no cambian\r\n// export default memo(Dropdown, (prev, next) => {\r\n//   return (\r\n//     prev.isOpen === next.isOpen &&\r\n//     prev.onToggle === next.onToggle &&\r\n//     prev.property.key === next.property.key &&\r\n//     prev.property.value === next.property.value &&\r\n//     prev.property.handleChange === next.property.handleChange\r\n//   );\r\n// });\r\n\r\n//************************************************* */\r\n// import { lazy, memo, useMemo } from 'react';\r\n// import { useDropdown } from './useDropdown.js';\r\n\r\n// const DropdownSelector = lazy(() => import('./DropdownSelector.js'));\r\n\r\n// export const Dropdown = ({ property, isOpen, onToggle }) => {\r\n//   const { array, pagination } = useDropdown({ classType: property.key });\r\n\r\n//   const placeholder = useMemo(\r\n//     () => property.key.charAt(0).toUpperCase() + property.key.slice(1),\r\n//     [property.key]\r\n//   );\r\n\r\n//   if (process.env.NODE_ENV === 'development') console.log('[Dropdown]');\r\n\r\n//   return (\r\n//     <div className='col px-0'>\r\n//       <DropdownSelector\r\n//         classType={property.key}\r\n//         value={property.value}\r\n//         handleChange={property.handleChange}\r\n//         placeholder={placeholder}\r\n//         pagination={pagination}\r\n//         isOpen={isOpen}\r\n//         onToggle={onToggle}\r\n//         className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default memo(Dropdown);\r\n\r\n\r\n\r\n//********************************************** */\r\n// import { memo, useMemo } from 'react';\r\n// import { useDropdown } from './useDropdown.js';\r\n// import DropdownSelector from './DropdownSelector.js';\r\n\r\n// export const Dropdown = ({ property, isOpen, onToggle }) => {\r\n//   const { array, pagination } = useDropdown({ classType: property.key });\r\n\r\n//   const placeholder = useMemo(\r\n//     () => property.key.charAt(0).toUpperCase() + property.key.slice(1),\r\n//     [property.key]\r\n//   );\r\n\r\n//   return (\r\n//     <DropdownSelector\r\n//       classType={property.key}\r\n//       value={property.value}\r\n//       handleChange={property.handleChange}\r\n//       placeholder={placeholder}\r\n//       pagination={pagination}\r\n//       isOpen={isOpen}\r\n//       onToggle={onToggle}\r\n//       className=\"form-control\"\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default memo(Dropdown);\r\n\r\n"],"names":["apis","paciente","process","doctor","consultorio","tratamiento","eps","genero","especialidad","useDropdown","_ref","classType","itemsPerPageInitial","alert","useAlertContext","safeItemsPerPage","Math","max","urlApi","useMemo","_apis$classType","data","status","useFetch","useEffect","type","title","buttons","array","Array","isArray","itemsPerPage","setItemsPerPage","useState","currentPage","setCurrentPage","totalPages","ceil","length","indexPages","from","_","i","currentItems","start","end","min","slice","goToPage","useCallback","pageIndex","goPrev","goNext","activePages","map","pagination","DropdownSelector","lazy","Dropdown","property","isOpen","onToggle","key","placeholder","charAt","toUpperCase","_jsx","className","children","value","handleChange","memo"],"sourceRoot":""}