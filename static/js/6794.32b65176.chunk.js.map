{"version":3,"file":"static/js/6794.32b65176.chunk.js","mappings":"gPAIA,MAAMA,EAAO,CACXC,SAAUC,uFACVC,OAAQD,sFACRE,YAAaF,0FACbG,YAAaH,0FACbI,IAAKJ,kFACLK,OAAQL,qFACRM,aAAcN,6FAGHO,EAAcC,IAAuB,IAAtB,UAAEC,EAAU,IAAID,EAC1C,MAAM,MAAEE,IAAUC,EAAAA,EAAAA,KAEZC,GAASC,EAAAA,EAAAA,SAAQ,SAAAC,EAAA,OAAqB,QAArBA,EAAMhB,EAAKW,UAAU,IAAAK,EAAAA,EAAI,IAAI,CAACL,KAC/C,KAAEM,EAAI,OAAEC,IAAWC,EAAAA,EAAAA,GAASL,IAElCM,EAAAA,EAAAA,WAAU,KACJF,GAAU,KAAON,EAAM,CAAES,KAAK,QAASC,MAAM,+CAA6CC,QAAQ,KACrG,CAACL,EAAQN,IAEZ,MAAMY,GAAQT,EAAAA,EAAAA,SAAQ,IAAeU,MAAMC,QAAQT,GAAQA,EAAO,GAAM,CAACA,KAGlEU,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAC1CC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,CAAC,EAAG,IAEzCG,GAAajB,EAAAA,EAAAA,SAAQ,KACzB,MAAMkB,EAAaC,KAAKC,KAAKX,EAAMY,OAAST,GAC5C,OAAOF,MAAMY,KAAK,CAAED,OAAQH,GAAc,CAACK,EAAGC,IAAMA,IACnD,CAACf,EAAMY,OAAQT,KAEXa,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAS,IAAMG,EAAWU,IAAI,CAACJ,EAAGC,IAAY,IAANA,IAI9E,OAHAnB,EAAAA,EAAAA,WAAU,KAAQqB,EAAeT,EAAWU,IAAI,CAACJ,EAAGC,IAAY,IAANA,KAAa,CAACP,IAGjE,CACLR,QACAmB,WAAY,CAAEhB,eAAcG,YAAWU,cAAaR,aAAYD,eAAcU,iBAAgBb,qB,aCtClG,MAAMgB,GAAmBC,EAAAA,EAAAA,MAAK,IAAM,gCAEvBC,EAAWpC,IAAqC,IAApC,SAAEqC,EAAQ,OAAEC,EAAM,SAAEC,GAAUvC,EACrD,MAAM,MAAEc,EAAK,WAAEmB,GAAelC,EAAY,CAAEE,UAAUoC,EAASG,MAGzDC,GAAcpC,EAAAA,EAAAA,SAAQ,IAAMgC,EAASG,IAAIE,OAAO,GAAGC,cAAgBN,EAASG,IAAII,MAAM,GAAI,CAACP,EAASG,MAI1G,OACEK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAACX,EAAgB,CAACjC,UAAWoC,EAASG,IAAKQ,MAAOX,EAASW,MAAOlC,MAAOA,EAAOmC,aAAcZ,EAASY,aAAcR,YAAaA,EAAaR,WAAYA,EAAYK,OAAQA,EAAQC,SAAUA,EAAUO,UAAW,6EAK5N,GAAeI,EAAAA,EAAAA,MAAKd,E","sources":["components/forms/dropdown/useDropdown.js","components/forms/dropdown/Dropdown.js"],"sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\r\nimport { useAlertContext } from \"../../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../../../hooks/useFetch.js\";\r\n\r\nconst apis = {\r\n  paciente: process.env.REACT_APP_API_PACIENTES,\r\n  doctor: process.env.REACT_APP_API_DOCTORES,\r\n  consultorio: process.env.REACT_APP_API_CONSULTORIOS,\r\n  tratamiento: process.env.REACT_APP_API_TRATAMIENTOS,\r\n  eps: process.env.REACT_APP_API_EPSS,\r\n  genero: process.env.REACT_APP_API_GENEROS,\r\n  especialidad: process.env.REACT_APP_API_ESPECIALIDADES,\r\n};\r\n\r\nexport const useDropdown = ({ classType='' }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  const urlApi = useMemo(() => apis[classType] ?? \"\", [classType]);   // ðŸ‘ˆ Memoriza la URL para evitar recrearla en cada render\r\n  const { data, status } = useFetch(urlApi);\r\n\r\n  useEffect(() => {\r\n    if (status >= 400) { alert({ type:'error', title:'Error en la conexiÃ³n con la base de datos', buttons:1 }) }\r\n  }, [status, alert]);\r\n\r\n  const array = useMemo(() => { return Array.isArray(data) ? data : [] }, [data]);\r\n\r\n  // ðŸ‘‡ Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(5);\r\n  const [indexPage, setIndexPage] = useState([0, 5]);\r\n\r\n  const indexPages = useMemo(() => {\r\n    const totalPages = Math.ceil(array.length / itemsPerPage);\r\n    return Array.from({ length: totalPages }, (_, i) => i) \r\n  }, [array.length, itemsPerPage]);  // ðŸ‘ˆ Calcula pÃ¡ginas de forma eficiente y memorizada\r\n\r\n  const [activePages, setActivePages] = useState(() => indexPages.map((_, i) => i === 0));    // ðŸ‘ˆ Estado inicial de pÃ¡ginas activas basado en indexPages\r\n  useEffect(() => { setActivePages(indexPages.map((_, i) => i === 0)) }, [indexPages]);       // ðŸ‘ˆ Sincroniza activePages si cambia indexPages\r\n\r\n  // ðŸ‘‡ Retorno del hook\r\n  return {\r\n    array,\r\n    pagination: { itemsPerPage, indexPage, activePages, indexPages, setIndexPage, setActivePages, setItemsPerPage, },\r\n  };\r\n}\r\nexport default useDropdown;","import  { lazy, memo, useMemo } from 'react'\r\nimport { useDropdown } from './useDropdown.js';\r\n\r\nconst DropdownSelector = lazy(() => import('./DropdownSelector.js'));\r\n\r\nexport const Dropdown = ({ property, isOpen, onToggle }) => {\r\n  const { array, pagination } = useDropdown({ classType:property.key });\r\n\r\n  // ðŸ‘‡ Memoriza placeholder para evitar recalcularlo en cada render\r\n  const placeholder = useMemo(() => property.key.charAt(0).toUpperCase() + property.key.slice(1), [property.key]);\r\n\r\n  if( process.env.NODE_ENV === 'development' ) { console.log('[Dropdown]') }\r\n\r\n  return (\r\n    <div className='col px-0'>\r\n      <DropdownSelector classType={property.key} value={property.value} array={array} handleChange={property.handleChange} placeholder={placeholder} pagination={pagination} isOpen={isOpen} onToggle={onToggle} className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Dropdown);\r\n\r\n// // ðŸ‘‡ memo para evitar re-render si props no cambian\r\n// export default memo(Dropdown, (prev, next) => {\r\n//   return (\r\n//     prev.isOpen === next.isOpen &&\r\n//     prev.onToggle === next.onToggle &&\r\n//     prev.property.key === next.property.key &&\r\n//     prev.property.value === next.property.value &&\r\n//     prev.property.handleChange === next.property.handleChange\r\n//   );\r\n// });"],"names":["apis","paciente","process","doctor","consultorio","tratamiento","eps","genero","especialidad","useDropdown","_ref","classType","alert","useAlertContext","urlApi","useMemo","_apis$classType","data","status","useFetch","useEffect","type","title","buttons","array","Array","isArray","itemsPerPage","setItemsPerPage","useState","indexPage","setIndexPage","indexPages","totalPages","Math","ceil","length","from","_","i","activePages","setActivePages","map","pagination","DropdownSelector","lazy","Dropdown","property","isOpen","onToggle","key","placeholder","charAt","toUpperCase","slice","_jsx","className","children","value","handleChange","memo"],"sourceRoot":""}