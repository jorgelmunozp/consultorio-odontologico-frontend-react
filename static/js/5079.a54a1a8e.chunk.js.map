{"version":3,"file":"static/js/5079.a54a1a8e.chunk.js","mappings":"sMAEA,MAWMA,GAAYC,E,QAAAA,IAAY,CAC5BC,KAAM,OACNC,aAbmB,CAAEC,KAAM,CAAEC,QAAQ,IAcrCC,SAAU,CACRC,MAAOA,CAACC,EAAOC,KAAaD,EAAMJ,KAAO,IAAKK,EAAOC,QAASL,QAAQ,IACtEM,OAASH,IAAYA,EAAMJ,KAAO,CAAEC,QAAQ,QAInC,MAAEE,EAAK,OAAEI,GAAWX,EAAUY,QAC3C,EAAeZ,EAAiB,O,mICjBhC,MAAMa,EAAgB,CACpBC,IAAK,OACLC,QAASC,EAAAA,GAGLC,GAAuBC,EAAAA,EAAAA,IAAeL,EAAeM,EAAAA,IAE9CC,GAAQC,EAAAA,EAAAA,IAAe,CAClCC,QAAS,CAAEC,KAAMN,GACjBO,WAAaC,GAAyBA,EAAqB,CAAEC,mBAAmB,MAGrEC,GAAYC,EAAAA,EAAAA,IAAaR,G,aCqBtC,MAAMS,GAAYC,EAAAA,EAAAA,OAAKC,EAAAA,EAAAA,MAAK,IAAM,0DAErBC,EAAMA,KAIfC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACd,MAAOA,EAAMe,UAErBF,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CAACC,SAASJ,EAAAA,EAAAA,KAAA,OAAAE,SAAK,0BAA0BR,UAAWA,EAAUQ,UACxEF,EAAAA,EAAAA,KAACJ,EAAS,QAMlB,GAAeC,EAAAA,EAAAA,MAAKE,E","sources":["store/authSlice.js","store/index.js","App.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { user: { logged: false }, };  // 游녣 redux-persist cargar치 lo guardado en localStorage autom치ticamente\r\n\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState,\r\n//   reducers: {\r\n//     login: (state, action) => ({ ...action.payload, logged: true }),\r\n//     logout: () => ({ logged: false }),\r\n//   },\r\n// });\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    login: (state, action) => { state.user = { ...action.payload, logged: true } },\r\n    logout: (state) => { state.user = { logged: false } },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = authSlice.actions;\r\nexport default authSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport authReducer from \"./authSlice.js\";\r\n\r\nimport sessionStorage from \"redux-persist/lib/storage/session\"; // 游녣 Cambiamos localStorage por sessionStorage\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage: sessionStorage, // 游녣 persistir치 solo por la sesi칩n del navegador\r\n};\r\n\r\nconst persistedAuthReducer = persistReducer(persistConfig, authReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: { auth: persistedAuthReducer, },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false, }), \r\n});\r\n\r\nexport const persistor = persistStore(store);","// import { lazy, useEffect, useReducer, useMemo } from 'react';\r\n// import { AuthContext } from './auth/authContext.js';\r\n// import { authReducer } from './auth/authReducer.js';\r\n\r\n// const AppRouter = lazy(() => import('./routers/AppRouter.js'));\r\n\r\n// // 游녢 Init seguro (previene errores si el JSON est치 corrupto)\r\n// const init = () => {\r\n//   try { return JSON.parse(localStorage.getItem(\"user\")) || { logged: false } } \r\n//   catch { return { logged: false } }\r\n// };\r\n\r\n// export const App = () => {\r\n//   const [user, dispatch] = useReducer( authReducer, {}, init );\r\n\r\n//   useEffect(() => {\r\n//     if(!user) return;\r\n//     localStorage.setItem('user', JSON.stringify(user));\r\n//   }, [user] );\r\n\r\n//   const authContextValue = useMemo(() => ({ user, dispatch }), [user]);\r\n\r\n//   if( process.env.NODE_ENV === 'development' ) { console.log('[App]') }\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={authContextValue}>\r\n//       <AppRouter />\r\n//     </AuthContext.Provider>\r\n//   )\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport { lazy, memo } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./store/index.js\";\r\n\r\nconst AppRouter = memo(lazy(() => import(\"./routers/AppRouter.js\")));\r\n\r\nexport const App = () => {\r\n  if (process.env.NODE_ENV === \"development\") console.log(\"[App] 游녢\");\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      {/* 游녢 PersistGate espera a que cargue el estado desde localStorage */}\r\n      <PersistGate loading={<div>Cargando sesi칩n...</div>} persistor={persistor}>\r\n        <AppRouter />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n"],"names":["authSlice","createSlice","name","initialState","user","logged","reducers","login","state","action","payload","logout","actions","persistConfig","key","storage","sessionStorage","persistedAuthReducer","persistReducer","authReducer","store","configureStore","reducer","auth","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","AppRouter","memo","lazy","App","_jsx","Provider","children","PersistGate","loading"],"sourceRoot":""}