{"version":3,"file":"static/js/9999.78f34b53.chunk.js","mappings":"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","sources":["helpers/getDate.js","../node_modules/jwt-decode/build/esm/index.js","helpers/getData.js","hooks/useFetch.js","helpers/getTime.js","hooks/crud/useCita.js","components/selectors/getCitasFiltered.js","hooks/crud/usePaciente.js","components/selectors/getPacientesFiltered.js","hooks/crud/useDoctor.js","components/selectors/getDoctoresFiltered.js","hooks/crud/useEspecialidad.js","components/selectors/getEspecialidadesFiltered.js","hooks/crud/useConsultorio.js","components/selectors/getConsultoriosFiltered.js","hooks/crud/useTratamiento.js","components/selectors/getTratamientosFiltered.js","hooks/useCrudFactory.js"],"sourcesContent":["const date = new Date();\r\n\r\nexport const getDate = date\r\n  .toLocaleDateString(\"es-CO\", {\r\n    formatMatcher: \"basic\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  })\r\n  .split(\"/\");","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","export const getData = async( urlApi ) => {\r\n    let responseFetch = { data: {}, status: 0 };\r\n    await fetch( urlApi )\r\n        .then(response => { responseFetch.status = response.status; return response.json() })\r\n        .then(data => responseFetch.data = data)\r\n        .catch((error) =>{\r\n            if(error.message === 'Failed to fetch') { responseFetch.status = 500 }\r\n        });\r\n    \r\n    return responseFetch;\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nimport { getData } from '../helpers/getData.js';\r\n\r\nexport const useFetch = ( urlApi ) => {\r\n    const [responseFetch, setResponseFetch] = useState({ data: [], status: 0 });\r\n    useEffect( () => { \r\n        getData( urlApi )\r\n            .then( datos => setResponseFetch({ data: datos.data, status: datos.status }) ) \r\n            .catch((error) => console.log(\"Error useFetch: \" + error.message));\r\n    }, []);\r\n\r\n    return responseFetch;\r\n}","const hours = new Date();\r\n\r\nexport const getTime = hours.toLocaleString(\"en-US\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: false,\r\n});","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getDate } from '../../helpers/getDate.js';\r\nimport { getTime } from '../../helpers/getTime.js';\r\nimport { getCitasFiltered } from '../../components/selectors/getCitasFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_CITAS;\r\n\r\nexport const useCita = ({ initialValues={ paciente:'', consultorio:'', doctor:'', tratamiento:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // --- State ---\r\n  const [paciente, setPaciente] = useState(initialValues.paciente || '');\r\n  const [fecha, setFecha] = useState(getDate[2] + \"-\" + getDate[1] + \"-\" + getDate[0]);\r\n  const [hora, setHora] = useState(getTime);\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n  const [tratamiento, setTratamiento] = useState(initialValues.tratamiento || '');\r\n\r\n  const state = [\r\n    { key:'paciente', value:paciente, type:\"dropdown\", handleChange: (value) => setPaciente(decode(value)) },\r\n    { key:'fecha', value:fecha, type:\"date\", handleChange: (value) => setFecha(decode(value)) },\r\n    { key:'hora', value:hora, type:\"time\", handleChange: (value) => setHora(decode(value)) },\r\n    { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange: (value) => setConsultorio(decode(value)) },\r\n    { key:'doctor', value:doctor, type:\"dropdown\", handleChange: (value) => setDoctor(decode(value)) },\r\n    { key:'tratamiento', value:tratamiento, type:\"dropdown\", handleChange: (value) => setTratamiento(decode(value)) }\r\n  ];\r\n\r\n  // --- Object ---\r\n  const dataObject = { paciente:'', fecha:'', hora:'', consultorio:'', doctor:'', tratamiento:'' }\r\n\r\n  // --- Titles ---\r\n  const titles = state.map(param => ({\r\n    title: param.key.charAt(0).toUpperCase() + param.key.slice(1),\r\n    type: param.type\r\n  }));\r\n  const placeholders = titles.map(item => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n    return (arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : []\r\n  }, [arrayFetch.data]);\r\n\r\n  // Queries\r\n  const [queryCode, setQueryCode] = useState('');\r\n  const [queryPatient, setQueryPatient] = useState('');\r\n  const [queryDate, setQueryDate] = useState('');\r\n  const [queryTime, setQueryTime] = useState('');\r\n  const [queryConsultoryRoom, setQueryConsultoryRoom] = useState('');\r\n  const [queryDoctor, setQueryDoctor] = useState('');\r\n  const [queryTreatment, setQueryTreatment] = useState('');\r\n\r\n  const queries = [queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment];\r\n  const setQueries = [setQueryCode, setQueryPatient, setQueryDate, setQueryTime, setQueryConsultoryRoom, setQueryDoctor, setQueryTreatment];\r\n\r\n  const arrayFiltered = useMemo(() =>\r\n    getCitasFiltered(array, queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment),\r\n    [array, queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment]\r\n  );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const numPages = Math.floor(arrayFiltered.length/itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if(resPages !== 0) {\r\n    for(let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if(i < 0) activePage.push(false);\r\n    }\r\n  } else {\r\n    for(let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if(i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- Sort ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a,b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a,b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a,b) => a.cita.paciente.localeCompare(b.cita.paciente); break;\r\n    case 4: SortByProperty = (a,b) => b.cita.paciente.localeCompare(a.cita.paciente); break;\r\n    default: break;     \r\n  }\r\n\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy }\r\n  };\r\n}\r\n\r\nexport default useCita;","export const getCitasFiltered = ( array=[],code='',patient='',date='',time='',consultoryRoom='',doctor='',treatment='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.cita.paciente.toLowerCase().includes(patient.toLowerCase()) && item.cita.fecha.toLowerCase().includes(date.toLowerCase()) && item.cita.hora.toLowerCase().includes(time.toLowerCase()) && item.cita.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase())  && item.cita.doctor.toLowerCase().includes(doctor.toLowerCase()) && item.cita.tratamiento.toLowerCase().includes(treatment.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getPacientesFiltered } from \"../../components/selectors/getPacientesFiltered.js\";\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_PACIENTES;\r\n\r\nexport const usePaciente = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', eps:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [eps, setEps] = useState(initialValues.eps || '');\r\n\r\n  const state = [\r\n    { key: \"nombre\", value: nombre, type: \"text\", handleChange: (v) => setNombre(decode(v)) },\r\n    { key: \"apellido\", value: apellido, type: \"text\", handleChange: (v) => setApellido(decode(v)) },\r\n    { key: \"identificacion\", value: identificacion, type: \"number\", handleChange: (v) => setIdentificacion(decode(v)) },\r\n    { key: \"genero\", value: genero, type: \"dropdown\", handleChange: (v) => setGenero(decode(v)) },\r\n    { key: \"eps\", value: eps, type: \"dropdown\", handleChange: (v) => setEps(decode(v)) },\r\n  ];\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', eps:'' }\r\n  \r\n  // --- Titles ---\r\n  const titles = state.map((parameter) => ({\r\n    title: parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1),\r\n    type: parameter.type,\r\n  }));\r\n  const placeholders = titles.map((item) => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n    return (arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [];\r\n  }, [arrayFetch.data]);\r\n\r\n  // Queries\r\n  const [queryCode, setQueryCode] = useState(\"\");\r\n  const [queryName, setQueryName] = useState(\"\");\r\n  const [queryLastname, setQueryLastname] = useState(\"\");\r\n  const [queryIdentification, setQueryIdentification] = useState(\"\");\r\n  const [queryGender, setQueryGender] = useState(\"\");\r\n  const [queryEps, setQueryEps] = useState(\"\");\r\n\r\n  const queries = [queryCode, queryIdentification, queryName, queryLastname, queryGender, queryEps];\r\n  const setQueries = [setQueryCode, setQueryIdentification, setQueryName, setQueryLastname, setQueryGender, setQueryEps];\r\n\r\n  const arrayFiltered = useMemo(() =>\r\n    getPacientesFiltered(array, queryCode, queryIdentification, queryName, queryLastname, queryGender, queryEps),\r\n    [array, queryCode, queryIdentification, queryName, queryLastname, queryGender, queryEps]\r\n  );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n  const numPages = Math.floor(arrayFiltered.length / itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if (resPages !== 0) {\r\n    for (let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a, b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a, b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a, b) => a.paciente.identificacion.localeCompare(b.paciente.identificacion); break;\r\n    case 4: SortByProperty = (a, b) => b.paciente.identificacion.localeCompare(a.paciente.identificacion); break;\r\n    case 5: SortByProperty = (a, b) => a.paciente.nombre.localeCompare(b.paciente.nombre); break;\r\n    case 6: SortByProperty = (a, b) => b.paciente.nombre.localeCompare(a.paciente.nombre); break;\r\n    case 7: SortByProperty = (a, b) => a.paciente.apellido.localeCompare(b.paciente.apellido); break;\r\n    case 8: SortByProperty = (a, b) => b.paciente.apellido.localeCompare(a.paciente.apellido); break;\r\n    case 9: SortByProperty = (a, b) => a.paciente.genero.localeCompare(b.paciente.genero); break;\r\n    case 10: SortByProperty = (a, b) => b.paciente.genero.localeCompare(a.paciente.genero); break;\r\n    case 11: SortByProperty = (a, b) => a.paciente.eps.localeCompare(b.paciente.eps); break;\r\n    case 12: SortByProperty = (a, b) => b.paciente.eps.localeCompare(a.paciente.eps); break;\r\n    default: break;\r\n  }\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default usePaciente;","export const getPacientesFiltered = ( array=[],code='',identification='',name='',lastname='',gender='',eps='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.paciente.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.paciente.nombre.toLowerCase().includes(name.toLowerCase()) && item.paciente.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.paciente.genero.toLowerCase().includes(gender.toLowerCase()) && item.paciente.eps.toLowerCase().includes(eps.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getDoctoresFiltered } from \"../../components/selectors/getDoctoresFiltered.js\";\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_DOCTORES;\r\n\r\nexport const useDoctor = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n\r\n  const state = [\r\n    { key: \"nombre\", value: nombre, type: \"text\", handleChange: (v) => setNombre(decode(v)) },\r\n    { key: \"apellido\", value: apellido, type: \"text\", handleChange: (v) => setApellido(decode(v)) },\r\n    { key: \"identificacion\", value: identificacion, type: \"number\", handleChange: (v) => setIdentificacion(decode(v)) },\r\n    { key: \"genero\", value: genero, type: \"dropdown\", handleChange: (v) => setGenero(decode(v)) },\r\n    { key: \"especialidad\", value: especialidad, type: \"dropdown\", handleChange: (v) => setEspecialidad(decode(v)) },\r\n  ];\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' }\r\n\r\n   // --- Titles ---\r\n  const titles = state.map((parameter) => ({\r\n    title: parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1),\r\n    type: parameter.type,\r\n  }));\r\n  const placeholders = titles.map((item) => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n    return (arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : []\r\n  }, [arrayFetch.data]);\r\n\r\n  // queries\r\n  const [queryCode, setQueryCode] = useState(\"\");\r\n  const [queryName, setQueryName] = useState(\"\");\r\n  const [queryLastname, setQueryLastname] = useState(\"\");\r\n  const [querySpeciality, setQuerySpeciality] = useState(\"\");\r\n\r\n  const queries = [queryCode, queryName, queryLastname, querySpeciality];\r\n  const setQueries = [setQueryCode, setQueryName, setQueryLastname, setQuerySpeciality];\r\n\r\n  const arrayFiltered = useMemo(\r\n    () => getDoctoresFiltered(array, queryCode, queryName, queryLastname, querySpeciality),\r\n    [array, queryCode, queryName, queryLastname, querySpeciality]\r\n  );\r\n\r\n  // pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n  const numPages = Math.floor(arrayFiltered.length / itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if (resPages !== 0) {\r\n    for (let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  } else if (resPages === 0) {\r\n    for (let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a, b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a, b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a, b) => a.doctor.nombre.localeCompare(b.doctor.nombre); break;\r\n    case 4: SortByProperty = (a, b) => b.doctor.nombre.localeCompare(a.doctor.nombre); break;\r\n    case 5: SortByProperty = (a, b) => a.doctor.apellido.localeCompare(b.doctor.apellido); break;\r\n    case 6: SortByProperty = (a, b) => b.doctor.apellido.localeCompare(a.doctor.apellido); break;\r\n    case 7: SortByProperty = (a, b) => a.doctor.identificacion.localeCompare(b.doctor.identificacion); break;\r\n    case 8: SortByProperty = (a, b) => b.doctor.identificacion.localeCompare(a.doctor.identificacion); break;\r\n    case 9: SortByProperty = (a, b) => a.doctor.genero.localeCompare(b.doctor.genero); break;\r\n    case 10: SortByProperty = (a, b) => b.doctor.genero.localeCompare(a.doctor.genero); break;\r\n    case 11: SortByProperty = (a, b) => a.doctor.especialidad.localeCompare(b.doctor.especialidad); break;\r\n    case 12: SortByProperty = (a, b) => b.doctor.especialidad.localeCompare(a.doctor.especialidad); break;\r\n    default: break;\r\n  }\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useDoctor;","export const getDoctoresFiltered = ( array=[],code='',name='',lastname='',speciality='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.doctor.nombre.toLowerCase().includes(name.toLowerCase()) && item.doctor.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.doctor.especialidad.toLowerCase().includes(speciality.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getEspecialidadesFiltered } from '../../components/selectors/getEspecialidadesFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport const useEspecialidad = (initialValues={ nombre:'' }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  const state = [\r\n    { key: 'nombre', value: nombre, type: 'text', handleChange: (value) => setNombre(decode(value)) }\r\n  ];\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const titles = state.map(param => ({\r\n    title: param.key.charAt(0).toUpperCase() + param.key.slice(1),\r\n    type: param.type\r\n  }));\r\n  const placeholders = titles.map(item => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n   return ( arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : []\r\n  }, [arrayFetch.data]);\r\n\r\n  // Queries\r\n  const [queryCode, setQueryCode] = useState('');\r\n  const [queryName, setQueryName] = useState('');\r\n\r\n  const queries = [queryCode, queryName];\r\n  const setQueries = [setQueryCode, setQueryName];\r\n\r\n  const arrayFiltered = useMemo(() =>\r\n    getEspecialidadesFiltered(array, queryCode, queryName),\r\n    [array, queryCode, queryName]\r\n  );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const numPages = Math.floor(arrayFiltered.length / itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if (resPages !== 0) {\r\n    for (let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a, b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a, b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a, b) => a.especialidad.nombre.localeCompare(b.especialidad.nombre); break;\r\n    case 4: SortByProperty = (a, b) => b.especialidad.nombre.localeCompare(a.especialidad.nombre); break;\r\n    default: break;\r\n  }\r\n\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useEspecialidad;","export const getEspecialidadesFiltered = ( array=[],code='',name='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.especialidad.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getConsultoriosFiltered } from '../../components/selectors/getConsultoriosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_CONSULTORIOS;\r\n\r\nexport const useConsultorio = ({ initialValues={ numero:'', nombre:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [numero, setNumero] = useState(initialValues.numero || '');\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  const state = [\r\n    { key: 'numero', value: numero, type: 'number', handleChange: (value) => setNumero(decode(value)) },\r\n    { key: 'nombre', value: nombre, type: 'text', handleChange: (value) => setNombre(decode(value)) }\r\n  ];\r\n\r\n  // --- Object ---\r\n  const dataObject = { numero:'', nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const titles = state.map(param => ({\r\n    title: param.key.charAt(0).toUpperCase() + param.key.slice(1),\r\n    type: param.type\r\n  }));\r\n  const placeholders = titles.map(item => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n    return (arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : []\r\n  }, [arrayFetch.data]);\r\n\r\n  // Queries\r\n  const [queryCode, setQueryCode] = useState('');\r\n  const [queryNumber, setQueryNumber] = useState('');\r\n  const [queryName, setQueryName] = useState('');\r\n\r\n  const queries = [queryCode, queryNumber, queryName];\r\n  const setQueries = [setQueryCode, setQueryNumber, setQueryName];\r\n\r\n  const arrayFiltered = useMemo(() =>\r\n    getConsultoriosFiltered(array, queryCode, queryNumber, queryName),\r\n    [array, queryCode, queryNumber, queryName]\r\n  );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const numPages = Math.floor(arrayFiltered.length / itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if (resPages !== 0) {\r\n    for (let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a, b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a, b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a, b) => a.consultorio.numero - b.consultorio.numero; break;\r\n    case 4: SortByProperty = (a, b) => b.consultorio.numero - a.consultorio.numero; break;\r\n    case 5: SortByProperty = (a, b) => a.consultorio.nombre.localeCompare(b.consultorio.nombre); break;\r\n    case 6: SortByProperty = (a, b) => b.consultorio.nombre.localeCompare(a.consultorio.nombre); break;\r\n    default: break;\r\n  }\r\n\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useConsultorio;","export const getConsultoriosFiltered = ( array=[],code='',number='',name='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.consultorio.numero.toString().includes(number) && item.consultorio.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getTratamientosFiltered } from '../../components/selectors/getTratamientosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_TRATAMIENTOS;\r\n\r\nexport const useTratamiento = ({ initialValues={ especialidad:'', consultorio:'', doctor:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n\r\n  const state = [\r\n    { key: 'especialidad', value: especialidad, type: \"dropdown\", handleChange: (value) => setEspecialidad(decode(value)), },\r\n    { key: 'consultorio', value: consultorio, type: \"dropdown\", handleChange: (value) => setConsultorio(decode(value)), },\r\n    { key: 'doctor', value: doctor, type: \"dropdown\", handleChange: (value) => setDoctor(decode(value)), },\r\n  ];\r\n\r\n  // --- Object ---\r\n  const dataObject = { especialidad:'', consultorio:'', doctor:'' }\r\n\r\n  // --- Titles ---\r\n  const titles = state.map((parameter) => ({\r\n    title: parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1),\r\n    type: parameter.type,\r\n  }));\r\n  const placeholders = titles.map((item) => item.title);\r\n\r\n  // --- Data (fetch + queries + pagination) ---\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch]);\r\n\r\n  const array = useMemo(() => {\r\n    return (arrayFetch.data && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [];\r\n  }, [arrayFetch.data]);\r\n\r\n  // Queries\r\n  const [queryCode, setQueryCode] = useState('');\r\n  const [querySpecialty, setQuerySpecialty] = useState('');\r\n  const [queryConsultoryRoom, setQueryConsultoryRoom] = useState('');\r\n  const [queryDoctor, setQueryDoctor] = useState('');\r\n  const queries = [queryCode, querySpecialty, queryConsultoryRoom, queryDoctor];\r\n  const setQueries = [\r\n    setQueryCode,\r\n    setQuerySpecialty,\r\n    setQueryConsultoryRoom,\r\n    setQueryDoctor,\r\n  ];\r\n\r\n  const arrayFiltered = useMemo(() =>\r\n    getTratamientosFiltered(array, queryCode, querySpecialty, queryConsultoryRoom, queryDoctor),\r\n    [array, queryCode, querySpecialty, queryConsultoryRoom, queryDoctor]\r\n  );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n  const numPages = Math.floor(arrayFiltered.length / itemsPerPage);\r\n  const resPages = arrayFiltered.length % itemsPerPage;\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];\r\n  if (resPages !== 0) {\r\n    for (let i = 0; i <= numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  } else if (resPages === 0) {\r\n    for (let i = 0; i < numPages; i++) {\r\n      indexPages.push(i);\r\n      if (i < 0) activePage.push(false);\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n  let SortByProperty = () => {};\r\n  switch (sortBy) {\r\n    case 1: SortByProperty = (a, b) => a.id - b.id; break;\r\n    case 2: SortByProperty = (a, b) => b.id - a.id; break;\r\n    case 3: SortByProperty = (a, b) => a.tratamiento.especialidad.localeCompare(b.tratamiento.especialidad); break;\r\n    case 4: SortByProperty = (a, b) => b.tratamiento.especialidad.localeCompare(a.tratamiento.especialidad);  break;\r\n    case 5: SortByProperty = (a, b) => a.tratamiento.consultorio.localeCompare(b.tratamiento.consultorio); break;\r\n    case 6: SortByProperty = (a, b) => b.tratamiento.consultorio.localeCompare(a.tratamiento.consultorio); break;\r\n    case 7: SortByProperty = (a, b) => a.tratamiento.doctor.localeCompare(b.tratamiento.doctor); break;\r\n    case 8: SortByProperty = (a, b) => b.tratamiento.doctor.localeCompare(a.tratamiento.doctor); break;\r\n    default: break;\r\n  }\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api: urlApi,\r\n    dataObject,\r\n    titles,\r\n    placeholders,\r\n    state,\r\n    data: { queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort: { SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useTratamiento;","export const getTratamientosFiltered = ( array=[],code='',specialty='',consultoryRoom='',doctor='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.tratamiento.especialidad.toLowerCase().includes(specialty.toLowerCase()) && item.tratamiento.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase()) && item.tratamiento.doctor.toLowerCase().includes(doctor.toLowerCase()) );\r\n}","import { useCita } from './crud/useCita.js';\r\nimport { usePaciente } from './crud/usePaciente.js';\r\nimport { useDoctor } from './crud/useDoctor.js';\r\nimport { useEspecialidad } from './crud/useEspecialidad.js';\r\nimport { useConsultorio } from './crud/useConsultorio.js';\r\nimport { useTratamiento } from './crud/useTratamiento.js';\r\n\r\nexport const useCrudFactory = ({ classType, initialValues={} }) => {\r\n  const hookCita = useCita({ initialValues:initialValues });\r\n  const hookPaciente = usePaciente({ initialValues:initialValues });\r\n  const hookDoctor = useDoctor({ initialValues:initialValues });\r\n  const hookConsultorio = useConsultorio({ initialValues:initialValues });\r\n  const hookTratamiento = useTratamiento({ initialValues:initialValues });\r\n  const hookEspecialidad = useEspecialidad({ initialValues:initialValues });\r\n\r\n  switch (classType) {\r\n    case 'cita': return hookCita;\r\n    case 'paciente': return hookPaciente;\r\n    case 'doctor': return hookDoctor;\r\n    case 'consultorio': return hookConsultorio;\r\n    case 'tratamiento': return hookTratamiento;\r\n    case 'especialidad': return hookEspecialidad;\r\n    default: throw new Error(`Hook no definido para classType: ${classType}`);\r\n  }\r\n}\r\nexport default useCrudFactory;"],"names":["getDate","Date","toLocaleDateString","formatMatcher","year","month","day","split","InvalidTokenError","Error","base64UrlDecode","str","output","replace","length","decodeURIComponent","atob","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","jwtDecode","token","options","pos","header","part","decoded","e","message","JSON","parse","prototype","name","useFetch","urlApi","responseFetch","setResponseFetch","useState","data","status","useEffect","async","fetch","then","response","json","catch","error","getData","datos","console","log","getTime","toLocaleString","hour","minute","hour12","process","useCita","_ref","initialValues","paciente","consultorio","doctor","tratamiento","alert","useAlertContext","setPaciente","fecha","setFecha","hora","setHora","setConsultorio","setDoctor","setTratamiento","state","key","value","type","handleChange","decode","titles","map","param","title","charAt","slice","placeholders","item","arrayFetch","buttons","array","useMemo","undefined","stringify","queryCode","setQueryCode","queryPatient","setQueryPatient","queryDate","setQueryDate","queryTime","setQueryTime","queryConsultoryRoom","setQueryConsultoryRoom","queryDoctor","setQueryDoctor","queryTreatment","setQueryTreatment","queries","setQueries","arrayFiltered","arguments","patient","date","time","consultoryRoom","treatment","filter","_id","includes","cita","toLowerCase","getCitasFiltered","itemsPerPage","setItemsPerPage","indexPage","setIndexPage","numPages","Math","floor","indexPages","activePage","i","push","activePages","setActivePages","sortBy","setSortBy","SortByProperty","a","b","id","localeCompare","api","dataObject","sort","usePaciente","nombre","apellido","identificacion","genero","eps","setNombre","setApellido","setIdentificacion","setGenero","setEps","v","parameter","queryName","setQueryName","queryLastname","setQueryLastname","queryIdentification","setQueryIdentification","queryGender","setQueryGender","queryEps","setQueryEps","identification","lastname","gender","getPacientesFiltered","useDoctor","especialidad","setEspecialidad","querySpeciality","setQuerySpeciality","speciality","getDoctoresFiltered","resPages","useEspecialidad","getEspecialidadesFiltered","useConsultorio","numero","setNumero","queryNumber","setQueryNumber","number","getConsultoriosFiltered","useTratamiento","querySpecialty","setQuerySpecialty","specialty","getTratamientosFiltered","useCrudFactory","classType","hookCita","hookPaciente","hookDoctor","hookConsultorio","hookTratamiento","hookEspecialidad"],"sourceRoot":""}