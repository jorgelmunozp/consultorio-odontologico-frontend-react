{"version":3,"file":"static/js/1307.908639b2.chunk.js","mappings":"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","sources":["classes/User.js","components/selectors/getPacientesFiltered.js","components/selectors/getDoctoresFiltered.js","components/selectors/getEspecialidadesFiltered.js","classes/Especialidad.js","components/selectors/getConsultoriosFiltered.js","classes/Consultorio.js","components/selectors/getTratamientosFiltered.js","classes/Tratamiento.js","components/selectors/getCitasFiltered.js","classes/Cita.js","classes/Classes.js","classes/Alert.js","components/alert/Alert.js","../node_modules/jwt-decode/build/esm/index.js","helpers/getData.js","hooks/useFetch.js"],"sourcesContent":["import { useState, useMemo, useEffect }  from \"react\";\r\nimport { Alert } from '../components/alert/Alert.js';\r\nimport { useFetch } from '../hooks/useFetch.js';\r\nimport { getPacientesFiltered } from '../components/selectors/getPacientesFiltered.js';\r\nimport { getDoctoresFiltered } from '../components/selectors/getDoctoresFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApiPacientes = process.env.REACT_APP_API_PACIENTES;\r\nconst urlApiDoctores = process.env.REACT_APP_API_DOCTORES;\r\n\r\nexport class User {\r\n    constructor({ nombre='', apellido='' }) {\r\n      this.nombre = {nombre}.nombre;\r\n      this.apellido = {apellido}.apellido;\r\n    }\r\n  }\r\n\r\nexport class Paciente extends User {\r\n    constructor({ nombre='', apellido='', identificacion='', genero='', eps='' }) {\r\n        super({ nombre:nombre, apellido:apellido });\r\n        this.identificacion = {identificacion}.identificacion;\r\n        this.genero = {genero}.genero;\r\n        this.eps = {eps}.eps;\r\n    }\r\n\r\n    getApi = () => { return( urlApiPacientes )}                 // METHOD API\r\n    get api () { return this.getApi() }                            // Getter api\r\n\r\n    getUser () { return new User( this.nombre, this.apellido ) }   // METHOD USER\r\n    get user () { return this.getUser() }                          // Getter user\r\n\r\n    getTitles = () => {                                            // METHOD TITLES\r\n      let titles = [];\r\n      this.state.forEach((parameter, index) => { \r\n          titles[index] = { \r\n              title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1), \r\n              type:parameter.type \r\n          }\r\n      });\r\n\r\n      // let placeholders = ['Código'];\r\n      let placeholders = [];\r\n      titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n      return({ titles, placeholders })\r\n    }                          \r\n    get titles () { return this.getTitles() }                      // Getter titles\r\n\r\n    getState = ({ nomb='', ape='', id='', gen='', eps_='' }) => {  // METHOD STATE\r\n      const [nombre, setNombre] = useState( nomb );                // Input nombre state\r\n      const [apellido, setApellido] = useState( ape );             // Input apellido state\r\n      const [identificacion, setIdentificacion] = useState( id );  // Input identificacion state\r\n      const [genero, setGenero] = useState( gen );                 // Select genero state\r\n      const [eps, setEps] = useState( eps_ );                      // Select eps state\r\n      const state = [\r\n        { key:'nombre', value:nombre, type:\"text\", handleChange: (value) => setNombre( decode(value) ) },\r\n        { key:'apellido', value:apellido, type:\"text\", handleChange: (value) => setApellido( decode(value) ) },\r\n        { key:'identificacion', value:identificacion, type:\"number\", handleChange: (value) => setIdentificacion( decode(value) ) },\r\n        { key:'genero', value:genero, type:\"dropdown\", handleChange: (value) => setGenero( decode(value) ) },\r\n        { key:'eps', value:eps, type:\"dropdown\", handleChange: (value) => setEps( decode(value) ) }\r\n      ];\r\n\r\n      return( state )\r\n\r\n    }      \r\n    get state () { return this.getState({ nomb:'', ape:'', id:'', gen:'', eps_:'' }) } // Getter state\r\n\r\n    getData = () => {                                              // METHOD DATA\r\n      /* Fetch */\r\n      const arrayFetch = useFetch(urlApiPacientes);\r\n      useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n\r\n      /* Query */\r\n      let [ queryCode, setQueryCode ] = useState('');\r\n      let [ queryIdentification, setQueryIdentification ] = useState('');\r\n      let [ queryName, setQueryName ] = useState('');\r\n      let [ queryLastname, setQueryLastname ] = useState('');\r\n      let [ queryGender, setQueryGender ] = useState('');\r\n      let [ queryEps, setQueryEps ] = useState('');\r\n      const queries = [queryCode,queryIdentification,queryName,queryLastname,queryGender,queryEps];\r\n      const setQueries = [setQueryCode,setQueryIdentification,setQueryName,setQueryLastname,setQueryGender,setQueryEps];\r\n      const arrayFiltered = useMemo( () => getPacientesFiltered(array,queryCode,queryIdentification,queryName,queryLastname,queryGender,queryEps), [array,queryCode,queryIdentification,queryName,queryLastname,queryGender,queryEps] );\r\n      \r\n      /* Pagination */\r\n      const [itemsPerPage, setItemPerPage ] = useState(10);           // Se define el número de items por página\r\n      const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n      const numPages = Math.floor(arrayFiltered.length/itemsPerPage); // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n      const resPages = arrayFiltered.length%itemsPerPage;             // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n      let indexPages = [];\r\n      let activePage = [true];                                        // [true]\r\n      if(resPages !== 0 ){\r\n        for(let i = 0; i <= numPages; i++) { \r\n          indexPages.push(i);                                         // [0,1,2,3]\r\n          if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n      } else if(resPages === 0 ){\r\n        for(let i = 0; i < numPages; i++) { \r\n          indexPages.push(i);                                         // [0,1,2,3]\r\n          if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n      }\r\n      const [activePages, setActivePages] = useState(activePage);     // [true,false,false,false]\r\n          \r\n      return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                             // Getter data\r\n\r\n    getSort = () => {                                                 // METHOD SORT\r\n      /* Sort */\r\n      const [sortBy, setSortBy] = useState(0);\r\n      let SortByProperty = () => {};\r\n      switch (sortBy) { \r\n          case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                            // Sort by id up\r\n          case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                            // Sort by id down\r\n          case 3: SortByProperty = (a,b) => { return a.paciente.identificacion.localeCompare(b.paciente.identificacion) }; break;  // Sort by identificacion up\r\n          case 4: SortByProperty = (a,b) => { return b.paciente.identificacion.localeCompare(a.paciente.identificacion) }; break;  // Sort by identificacion down\r\n          case 5: SortByProperty = (a,b) => { return a.paciente.nombre.localeCompare(b.paciente.nombre) }; break;     // Sort by nombre up\r\n          case 6: SortByProperty = (a,b) => { return b.paciente.nombre.localeCompare(a.paciente.nombre) }; break;     // Sort by nombre down\r\n          case 7: SortByProperty = (a,b) => { return a.paciente.apellido.localeCompare(b.paciente.apellido) }; break; // Sort by apellido up\r\n          case 8: SortByProperty = (a,b) => { return b.paciente.apellido.localeCompare(a.paciente.apellido) }; break; // Sort by apellido down\r\n          case 9: SortByProperty = (a,b) => { return a.paciente.genero.localeCompare(b.paciente.genero) }; break;     // Sort by genero up\r\n          case 10: SortByProperty = (a,b) => { return b.paciente.genero.localeCompare(a.paciente.genero) }; break;    // Sort by genero down\r\n          case 11: SortByProperty = (a,b) => { return a.paciente.eps.localeCompare(b.paciente.eps) }; break;          // Sort by eps up\r\n          case 12: SortByProperty = (a,b) => { return b.paciente.eps.localeCompare(a.paciente.eps) }; break;          // Sort by eps down\r\n          default: SortByProperty = () => {}; break;                  // Default case to avoid errors\r\n      }\r\n\r\n      return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                             // Getter data\r\n\r\n  }\r\n\r\nexport class Doctor extends User {\r\n    constructor({ nombre='', apellido='', identificacion='', genero='', especialidad='' }) {\r\n        super({ nombre:nombre, apellido:apellido });\r\n        this.identificacion = {identificacion}.identificacion;\r\n        this.genero = {genero}.genero;\r\n        this.especialidad = {especialidad}.especialidad;\r\n    }\r\n\r\n    getApi = () => { return( urlApiDoctores )}                     // METHOD API\r\n    get api () { return this.getApi() }                            // Getter api\r\n\r\n    getUser () { return new User(this.nombre, this.apellido) }     // METHOD USER\r\n    get user () { return this.getUser() }                          // Getter user\r\n\r\n    getTitles = () => {                                            // METHOD TITLES\r\n      let titles = [];\r\n      this.state.forEach((parameter, index) => { \r\n          titles[index] = { \r\n              title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1), \r\n              type:parameter.type \r\n          }\r\n      });\r\n\r\n      // let placeholders = ['Código'];\r\n      let placeholders = [];\r\n      titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n      return({ titles, placeholders })\r\n    }                          \r\n    get titles () { return this.getTitles() }                      // Getter titles\r\n\r\n    getState = ({ nomb='', ape='', id='', gen='', esp='' }) => { // METHOD STATE\r\n      const [nombre, setNombre] = useState( nomb );                // Input nombre state\r\n      const [apellido, setApellido] = useState( ape );             // Input apellido state\r\n      const [identificacion, setIdentificacion] = useState( id );  // Input identificacion state\r\n      const [genero, setGenero] = useState( gen );                 // Select genero state\r\n      const [especialidad, setEspecialidad] = useState( esp );     // Select especialidad state\r\n      const state = [\r\n        { key:'nombre', value:nombre, type:\"text\", handleChange: (value) => setNombre( decode(value) ) },\r\n        { key:'apellido', value:apellido, type:\"text\", handleChange: (value) => setApellido( decode(value) ) },\r\n        { key:'identificacion', value:identificacion, type:\"number\", handleChange: (value) => setIdentificacion( decode(value) ) },\r\n        { key:'genero', value:genero, type:\"dropdown\", handleChange: (value) => setGenero( decode(value) ) },\r\n        { key:'especialidad', value:especialidad, type:\"dropdown\", handleChange: (value) => setEspecialidad( decode(value) ) }\r\n      ];\r\n\r\n      return( state )\r\n    }      \r\n    get state () { return this.getState({ nomb:'', ape:'', id:'', gen:'', esp:'' }) } // Getter state\r\n\r\n    getData = () => {                                               // METHOD DATA\r\n      /* Fetch */\r\n      const arrayFetch = useFetch(urlApiDoctores);\r\n      useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n  \r\n      /* Query */\r\n      let [ queryCode, setQueryCode ] = useState('');\r\n      let [ queryName, setQueryName ] = useState('');\r\n      let [ queryLastname, setQueryLastname ] = useState('');\r\n      let [ querySpeciality, setQuerySpeciality ] = useState('');\r\n      const queries = [queryCode,queryName,queryLastname,querySpeciality];\r\n      const setQueries = [setQueryCode,setQueryName,setQueryLastname,setQuerySpeciality];\r\n      const arrayFiltered = useMemo( () => getDoctoresFiltered(array,queryCode,queryName,queryLastname,querySpeciality), [array,queryCode,queryName,queryLastname,querySpeciality] );\r\n      \r\n      /* Pagination */\r\n      const [itemsPerPage, setItemPerPage ] = useState(10);           // Se define el número de items por página\r\n      const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n      const numPages = Math.floor(arrayFiltered.length/itemsPerPage); // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n      const resPages = arrayFiltered.length%itemsPerPage;             // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n      let indexPages = [];\r\n      let activePage = [true];                                        // [true]\r\n      if(resPages !== 0 ){\r\n        for(let i = 0; i <= numPages; i++) { \r\n          indexPages.push(i);                                          // [0,1,2,3]\r\n          if(i < 0) { activePage.push(false); }                        // [true,false,false,false]\r\n        }\r\n      } else if(resPages === 0 ){\r\n        for(let i = 0; i < numPages; i++) { \r\n          indexPages.push(i);                                          // [0,1,2,3]\r\n          if(i < 0) { activePage.push(false); }                        // [true,false,false,false]\r\n        }\r\n      }\r\n      const [activePages, setActivePages] = useState(activePage);      // [true,false,false,false]\r\n        \r\n      return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                              // Getter data\r\n\r\n    getSort = () => {                                                  // METHOD SORT\r\n      /* Sort */\r\n      const [sortBy, setSortBy] = useState(0);\r\n      let SortByProperty = () => {};\r\n      switch (sortBy) { \r\n          case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                            // Sort by id up\r\n          case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                            // Sort by id down\r\n          case 3: SortByProperty = (a,b) => { return a.doctor.nombre.localeCompare(b.doctor.nombre) }; break;         // Sort by nombre up\r\n          case 4: SortByProperty = (a,b) => { return b.doctor.nombre.localeCompare(a.doctor.nombre) }; break;         // Sort by nombre down\r\n          case 5: SortByProperty = (a,b) => { return a.doctor.apellido.localeCompare(b.doctor.apellido) }; break;     // Sort by apellido up\r\n          case 6: SortByProperty = (a,b) => { return b.doctor.apellido.localeCompare(a.doctor.apellido) }; break;     // Sort by apellido down\r\n          case 7: SortByProperty = (a,b) => { return a.doctor.identificacion.localeCompare(b.doctor.identificacion) }; break; // Sort by identificacion up\r\n          case 8: SortByProperty = (a,b) => { return b.doctor.identificacion.localeCompare(a.doctor.identificacion) }; break; // Sort by identificacion down\r\n          case 9: SortByProperty = (a,b) => { return a.doctor.genero.localeCompare(b.doctor.genero) }; break;              // Sort by genero up\r\n          case 10: SortByProperty = (a,b) => { return b.doctor.genero.localeCompare(a.doctor.genero) }; break;             // Sort by genero down\r\n          case 11: SortByProperty = (a,b) => { return a.doctor.especialidad.localeCompare(b.doctor.especialidad) }; break; // Sort by especialidad up\r\n          case 12: SortByProperty = (a,b) => { return b.doctor.especialidad.localeCompare(a.doctor.especialidad) }; break; // Sort by especialidad down\r\n          default: SortByProperty = () => {}; break;                  // Default case to avoid errors\r\n      }\r\n\r\n      return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                              // Getter data\r\n\r\n  }","export const getPacientesFiltered = ( array,code='',identification='',name='',lastname='',gender='',eps='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.paciente.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.paciente.nombre.toLowerCase().includes(name.toLowerCase()) && item.paciente.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.paciente.genero.toLowerCase().includes(gender.toLowerCase()) && item.paciente.eps.toLowerCase().includes(eps.toLowerCase()) );\r\n}","export const getDoctoresFiltered = ( array,code='',name='',lastname='',speciality='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.doctor.nombre.toLowerCase().includes(name.toLowerCase()) && item.doctor.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.doctor.especialidad.toLowerCase().includes(speciality.toLowerCase()) );\r\n}","export const getEspecialidadesFiltered = ( array,code='',name='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.especialidad.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect }  from \"react\";\r\nimport { Alert } from '../components/alert/Alert.js';\r\nimport { useFetch } from '../hooks/useFetch.js';\r\nimport { getEspecialidadesFiltered } from '../components/selectors/getEspecialidadesFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\n// const Alert = lazy(() => import('../components/alert/Alert.js'));\r\n\r\nconst urlApi = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport class Especialidad {\r\n    constructor({ nombre='' }) {\r\n        this.nombre = {nombre}.nombre;\r\n    }\r\n\r\n    getApi = () => { return( urlApi )}                            // METHOD API\r\n    get api () { return this.getApi() }                           // Getter api\r\n\r\n    getTitles = () => {                                           // METHOD TITLES\r\n        let titles = [];\r\n        this.state.forEach((parameter, index) => {\r\n            titles[index] = {\r\n                title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1),\r\n                type:parameter.type\r\n            }\r\n        });\r\n\r\n        // let placeholders = ['Código'];\r\n        let placeholders = [];\r\n        titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n        return({ titles, placeholders })\r\n    }\r\n    get titles () { return this.getTitles() }                     // Getter titles\r\n\r\n    getState = ({ nomb='' }) => {                            // Method\r\n        const [nombre, setNombre] = useState( nomb );             // Input nombre state\r\n        const state = [\r\n          { key:'nombre', value:nombre, type:\"text\", handleChange: (value) => setNombre( decode(value) ) }\r\n        ];\r\n\r\n        return( state )\r\n    }\r\n    get state () { return this.getState({ nomb:'' }) }            // Getter state\r\n\r\n    getData = () => {                                             // METHOD DATA\r\n        /* Fetch */\r\n        const arrayFetch = useFetch(urlApi);\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n\r\n        /* Query */\r\n        let [ queryCode, setQueryCode ] = useState('');\r\n        let [ queryName, setQueryName ] = useState('');\r\n        const queries = [queryCode,queryName];\r\n        const setQueries = [setQueryCode,setQueryName];\r\n        const arrayFiltered = useMemo( () => getEspecialidadesFiltered(array,queryCode,queryName), [array,queryCode,queryName] );\r\n\r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(10);          // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(arrayFiltered.length/itemsPerPage); // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = arrayFiltered.length%itemsPerPage;             // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        let indexPages = [];\r\n        let activePage = [true];                                        // [true]\r\n        if(resPages !== 0 ){\r\n        for(let i = 0; i <= numPages; i++) {\r\n            indexPages.push(i);                                         // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n        } else if(resPages === 0 ){\r\n        for(let i = 0; i < numPages; i++) {\r\n            indexPages.push(i);                                         // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);     // [true,false,false,false]\r\n\r\n        return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                              // Getter data\r\n\r\n    getSort = () => {                                                  // METHOD SORT\r\n        /* Sort */\r\n        const [sortBy, setSortBy] = useState(0);\r\n        let SortByProperty = () => {};\r\n        switch (sortBy) {\r\n            case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                                // Sort by id up\r\n            case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                                // Sort by id down\r\n            case 3: SortByProperty = (a,b) => { return a.especialidad.nombre.localeCompare(b.especialidad.nombre) }; break; // Sort by nombre up\r\n            case 4: SortByProperty = (a,b) => { return b.especialidad.nombre.localeCompare(a.especialidad.nombre) }; break; // Sort by nombre down\r\n            default: SortByProperty = () => {}; break;                 // Default case to avoid errors\r\n        }\r\n\r\n        return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                              // Getter data\r\n\r\n}","export const getConsultoriosFiltered = ( array,code='',number='',name='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.consultorio.numero.toString().includes(number) && item.consultorio.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect }  from \"react\";\r\nimport { Alert } from '../components/alert/Alert.js';\r\nimport { useFetch } from '../hooks/useFetch.js';\r\nimport { getConsultoriosFiltered } from '../components/selectors/getConsultoriosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\n// const Alert = lazy(() => import('../components/alert/Alert.js'));\r\n\r\nconst urlApi = process.env.REACT_APP_API_CONSULTORIOS;\r\n\r\nexport class Consultorio {\r\n    constructor({ numero='', nombre='' }) {\r\n        this.numero = {numero}.numero;\r\n        this.nombre = {nombre}.nombre;\r\n    }\r\n\r\n    getApi = () => { return( urlApi )}                               // METHOD API\r\n    get api () { return this.getApi() }                              // Getter api\r\n\r\n    getTitles = () => {                                              // METHOD TITLES\r\n        let titles = [];\r\n        this.state.forEach((parameter, index) => { \r\n            titles[index] = { \r\n                title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1), \r\n                type:parameter.type \r\n            }\r\n        });\r\n\r\n        // let placeholders = ['Código'];\r\n        let placeholders = [];\r\n        titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n        return({ titles, placeholders })\r\n    }                          \r\n    get titles () { return this.getTitles() }                        // Getter titles\r\n\r\n    getState = ({ num='', nomb='' }) => {                   // METHOD STATE\r\n        const [ numero, setNumero ] = useState( num );               // Input número state\r\n        const [ nombre, setNombre ] = useState( nomb );              // Input nombre state\r\n        const state = [\r\n          { key:'numero', value:numero, type:'number', handleChange: (value) => setNumero( decode(value) ) },\r\n          { key:'nombre', value:nombre, type:'text', handleChange: (value) => setNombre( decode(value) ) }\r\n        ];\r\n        \r\n        return( state )\r\n    }      \r\n    get state () { return this.getState({ num:'', nomb:'' }) }       // Getter state\r\n\r\n    getData = () => {                                                // METHOD DATA\r\n        /* Fetch */\r\n        const arrayFetch = useFetch(urlApi);\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n        \r\n        /* Query */\r\n        let [ queryCode, setQueryCode ] = useState('');\r\n        let [ queryNumber, setQueryNumber ] = useState('');\r\n        let [ queryName, setQueryName ] = useState('');\r\n        const queries = [ queryCode,queryNumber,queryName ];\r\n        const setQueries = [ setQueryCode,setQueryNumber,setQueryName ];\r\n        const arrayFiltered = useMemo( () => getConsultoriosFiltered(array,queryCode,queryNumber,queryName), [array,queryCode,queryNumber,queryName] );\r\n        \r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(10);          // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(arrayFiltered.length/itemsPerPage); // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = arrayFiltered.length%itemsPerPage;             // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        \r\n        let indexPages = [];\r\n        let activePage = [true];                                       // [true]\r\n        if(resPages !== 0 ){\r\n            for(let i = 0; i <= numPages; i++) { \r\n            indexPages.push(i);                                        // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                      // [true,false,false,false]\r\n            }\r\n        } else if(resPages === 0 ){\r\n            for(let i = 0; i < numPages; i++) { \r\n            indexPages.push(i);                                        // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                      // [true,false,false,false]\r\n            }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);    // [true,false,false,false]\r\n        \r\n        return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                              // Getter data\r\n\r\n    getSort = () => {                                                  // METHOD SORT\r\n        /* Sort */\r\n        const [sortBy, setSortBy] = useState(0);\r\n        let SortByProperty = () => {};\r\n        switch (sortBy) { \r\n            case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                                // Sort by id up\r\n            case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                                // Sort by id down\r\n            case 3: SortByProperty = (a,b) => { return a.consultorio.numero - b.consultorio.numero }; break;                // Sort by numero up\r\n            case 4: SortByProperty = (a,b) => { return b.consultorio.numero - a.consultorio.numero }; break;                // Sort by numero down\r\n            case 5: SortByProperty = (a,b) => { return a.consultorio.nombre.localeCompare(b.consultorio.nombre) }; break;   // Sort by nombre up\r\n            case 6: SortByProperty = (a,b) => { return b.consultorio.nombre.localeCompare(a.consultorio.nombre) }; break;   // Sort by nombre down\r\n            default: SortByProperty = () => {}; break;                  // Default case to avoid errors\r\n        }\r\n\r\n        return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                              // Getter data\r\n\r\n}","export const getTratamientosFiltered = ( array,code='',specialty='',consultoryRoom='',doctor='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.tratamiento.especialidad.toLowerCase().includes(specialty.toLowerCase()) && item.tratamiento.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase()) && item.tratamiento.doctor.toLowerCase().includes(doctor.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect }  from \"react\";\r\nimport { Alert } from '../components/alert/Alert.js';\r\nimport { useFetch } from '../hooks/useFetch.js';\r\nimport { Especialidad } from './Especialidad.js';\r\nimport { Consultorio } from './Consultorio.js';\r\nimport { Doctor } from './User.js';\r\nimport { getTratamientosFiltered } from '../components/selectors/getTratamientosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\n// const Alert = lazy(() => import('../components/alert/Alert.js'));\r\n\r\nconst urlApi = process.env.REACT_APP_API_TRATAMIENTOS;\r\n\r\nexport class Tratamiento {\r\n    constructor({ especialidad='', consultorio='', doctor='' }) {\r\n        this.especialidad = new Especialidad({ especialidad:{especialidad} });\r\n        this.consultorio = new Consultorio({ consultorio:{consultorio} });\r\n        this.doctor = new Doctor({ doctor:doctor });\r\n    }\r\n\r\n    getApi = () => { return( urlApi )}                               // METHOD API\r\n    get api () { return this.getApi() }                              // Getter api\r\n\r\n    getTitles = () => {                                              // METHOD TITLES\r\n        let titles = [];\r\n        this.state.forEach((parameter, index) => { \r\n            titles[index] = { \r\n                title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1), \r\n                type:parameter.type \r\n            }\r\n        });\r\n\r\n        // let placeholders = ['Código'];\r\n        let placeholders = [];\r\n        titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n        return({ titles, placeholders })\r\n    }                          \r\n    get titles () { return this.getTitles() }                        // Getter titles\r\n\r\n    getState = ({ esp='', cons='', doc='' }) => {       // Method\r\n        const [especialidad, setEspecialidad] = useState( esp );     // Input especialidad state\r\n        const [consultorio, setConsultorio] = useState( cons );      // Select consultorio state\r\n        const [doctor, setDoctor] = useState( doc );                 // Select doctor state\r\n        const state = [\r\n          { key:'especialidad', value:especialidad, type:\"dropdown\", handleChange: (value) => setEspecialidad( decode(value) ) },\r\n          { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange: (value) => setConsultorio( decode(value) ) },\r\n          { key:'doctor', value:doctor, type:\"dropdown\", handleChange: (value) => setDoctor( decode(value) ) }\r\n        ];\r\n        \r\n        return( state )\r\n    }      \r\n    get state () { return this.getState({ esp:'', cons:'', doc:'' }) } // Getter state\r\n\r\n    getData = () => {                                                // METHOD DATA\r\n        /* Fetch */\r\n        const arrayFetch = useFetch(urlApi);\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            // return (arrayFetch.data && arrayFetch.data.length !== (0 || undefined)) ? arrayFetch.data : [];\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n\r\n        /* Query */\r\n        let [ queryCode, setQueryCode ] = useState('');\r\n        let [ querySpecialty, setQuerySpecialty ] = useState('');\r\n        let [ queryConsultoryRoom, setQueryConsultoryRoom ] = useState('');\r\n        let [ queryDoctor, setQueryDoctor ] = useState('');\r\n        const queries = [queryCode,querySpecialty,queryConsultoryRoom,queryDoctor];\r\n        const setQueries = [setQueryCode,setQuerySpecialty,setQueryConsultoryRoom,setQueryDoctor];\r\n        const arrayFiltered = useMemo( () => getTratamientosFiltered(array,queryCode,querySpecialty,queryConsultoryRoom,queryDoctor), [array,queryCode,querySpecialty,queryConsultoryRoom,queryDoctor] );\r\n        \r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(10);          // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(arrayFiltered.length/itemsPerPage); // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = arrayFiltered.length%itemsPerPage;             // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        let indexPages = [];\r\n        let activePage = [true];                                        // [true]\r\n        if(resPages !== 0 ){\r\n        for(let i = 0; i <= numPages; i++) { \r\n            indexPages.push(i);                                         // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n        } else if(resPages === 0 ){\r\n        for(let i = 0; i < numPages; i++) { \r\n            indexPages.push(i);                                         // [0,1,2,3]\r\n            if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n        }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);     // [true,false,false,false]\r\n    \r\n        return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                              // Getter data\r\n\r\n    getSort = () => {                                                  // METHOD SORT\r\n        /* Sort */\r\n        const [sortBy, setSortBy] = useState(0);\r\n        let SortByProperty = () => {};\r\n        switch (sortBy) { \r\n            case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                                // Sort by id up\r\n            case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                                // Sort by id down\r\n            case 3: SortByProperty = (a,b) => { return a.tratamiento.especialidad.localeCompare(b.tratamiento.especialidad) }; break; // Sort by especialidad up\r\n            case 4: SortByProperty = (a,b) => { return b.tratamiento.especialidad.localeCompare(a.tratamiento.especialidad) }; break; // Sort by especialidad down\r\n            case 5: SortByProperty = (a,b) => { return a.tratamiento.consultorio.localeCompare(b.tratamiento.consultorio) }; break;   // Sort by consultorio up\r\n            case 6: SortByProperty = (a,b) => { return b.tratamiento.consultorio.localeCompare(a.tratamiento.consultorio) }; break;   // Sort by consultorio down\r\n            case 7: SortByProperty = (a,b) => { return a.tratamiento.doctor.localeCompare(b.tratamiento.doctor) }; break;   // Sort by doctor name up\r\n            case 8: SortByProperty = (a,b) => { return b.tratamiento.doctor.localeCompare(a.tratamiento.doctor) }; break;   // Sort by doctor name down\r\n            default: SortByProperty = () => {}; break;                 // Default case to avoid errors\r\n        }\r\n\r\n        return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                              // Getter data\r\n\r\n}","export const getCitasFiltered = ( array,code='',patient='',date='',time='',consultoryRoom='',doctor='',treatment='' ) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.cita.paciente.toLowerCase().includes(patient.toLowerCase()) && item.cita.fecha.toLowerCase().includes(date.toLowerCase()) && item.cita.hora.toLowerCase().includes(time.toLowerCase()) && item.cita.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase())  && item.cita.doctor.toLowerCase().includes(doctor.toLowerCase()) && item.cita.tratamiento.toLowerCase().includes(treatment.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect }  from \"react\";\r\nimport { Alert } from '../components/alert/Alert.js';\r\nimport { useFetch } from '../hooks/useFetch.js';\r\nimport { Paciente } from './User.js';\r\nimport { Tratamiento } from './Tratamiento.js';\r\nimport { Consultorio } from './Consultorio.js';\r\nimport { Doctor } from './User.js';\r\nimport { getDate } from '../helpers/getDate.js';\r\nimport { getTime } from '../helpers/getTime.js';\r\nimport { getCitasFiltered } from '../components/selectors/getCitasFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_CITAS;\r\n\r\nexport class Cita {\r\n    constructor({ paciente='', consultorio='', doctor='', tratamiento='' }) {\r\n        this.paciente = new Paciente({ paciente:{paciente} });\r\n        this.fecha = getDate[2] + \"/\" + getDate[1] + \"/\" + getDate[0];\r\n        this.hora = getTime;\r\n        this.consultorio = new Consultorio({ consultorio:{consultorio} });\r\n        this.doctor = new Doctor({ doctor:{doctor} });\r\n        this.tratamiento = new Tratamiento({ tratamiento:{tratamiento} });\r\n    }\r\n\r\n    getApi = () => { return( urlApi )}                            // METHOD API\r\n    get api () { return this.getApi() }                           // Getter api\r\n\r\n    getTitles = () => {                                           // METHOD TITLES\r\n        let titles = [];\r\n        this.state.forEach((parameter, index) => { \r\n            titles[index] = { \r\n                title:parameter.key.charAt(0).toUpperCase() + parameter.key.slice(1), \r\n                type:parameter.type \r\n            }\r\n        });\r\n\r\n        // let placeholders = ['Código'];\r\n        let placeholders = [];\r\n        titles.forEach(item => { placeholders.push(item.title) } );\r\n\r\n        return({ titles, placeholders })\r\n    }                          \r\n    get titles () { return this.getTitles() }                     // Getter titles\r\n\r\n    getState = ({ pac='', cons='', doc='', trat='' }) => {                             // Method\r\n        const [paciente, setPaciente] = useState( pac );          // Select paciente\r\n        let [fecha, setFecha] = useState(getDate[2] + \"-\" + getDate[1] + \"-\" + getDate[0]);\r\n        let [hora, setHora] = useState(getTime);\r\n        const [consultorio, setConsultorio] = useState( cons );   // Select consultorio\r\n        const [doctor, setDoctor] = useState( doc );              // Select doctor\r\n        const [tratamiento, setTratamiento] = useState( trat );   // Select tratamiento      \r\n        const state = [\r\n          { key:'paciente', value:paciente, type:\"dropdown\", handleChange: (value) => setPaciente( decode(value) ) },\r\n          { key:'fecha', value:fecha, type:\"date\", handleChange: (value) => setFecha( decode(value) ) },\r\n          { key:'hora', value:hora, type:\"time\", handleChange: (value) => setHora( decode(value) ) },\r\n          { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange: (value) => setConsultorio( decode(value) ) },\r\n          { key:'doctor', value:doctor, type:\"dropdown\", handleChange: (value) => setDoctor( decode(value) ) },\r\n          { key:'tratamiento', value:tratamiento, type:\"dropdown\", handleChange: (value) => setTratamiento( decode(value) ) }\r\n        ];\r\n        \r\n        return( state )\r\n    }      \r\n    get state () { return this.getState({ pac:'', cons:'', doc:'', trat:'' }) }                        // Getter state\r\n\r\n    getData = () => {                                              // METHOD DATA\r\n        /* Fetch */\r\n        let arrayFetch = useFetch(urlApi);\r\n\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        const array = useMemo(() => {\r\n            return ( (JSON.stringify(arrayFetch.data) && JSON.stringify(arrayFetch.data).length !== (0 || undefined)) ? arrayFetch.data : [] );\r\n        }, [arrayFetch.data]);\r\n\r\n        /* Query */\r\n        let [ queryCode, setQueryCode ] = useState('');\r\n        let [ queryPatient, setQueryPatient ] = useState('');\r\n        let [ queryDate, setQueryDate ] = useState('');\r\n        let [ queryTime, setQueryTime ] = useState('');\r\n        let [ queryConsultoryRoom, setQueryConsultoryRoom ] = useState('');\r\n        let [ queryDoctor, setQueryDoctor ] = useState('');\r\n        let [ queryTreatment, setQueryTreatment ] = useState('');\r\n        const queries = [queryCode,queryPatient,queryDate,queryTime,queryConsultoryRoom,queryDoctor,queryTreatment];\r\n        const setQueries = [setQueryCode,setQueryPatient,setQueryDate,setQueryTime,setQueryConsultoryRoom,setQueryDoctor,setQueryTreatment];\r\n        const arrayFiltered = useMemo( () => getCitasFiltered(array,queryCode,queryPatient,queryDate,queryTime,queryConsultoryRoom,queryDoctor,queryTreatment), [array,queryCode,queryPatient,queryDate,queryTime,queryConsultoryRoom,queryDoctor,queryTreatment] );\r\n        \r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(10);              // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);      // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(arrayFiltered.length/itemsPerPage);     // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = arrayFiltered.length%itemsPerPage;                 // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        let indexPages = [];\r\n        let activePage = [true];                                            // [true]\r\n        if(resPages !== 0 ){\r\n            for(let i = 0; i <= numPages; i++) { \r\n                indexPages.push(i);                                         // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n            }\r\n        } else if(resPages === 0 ){\r\n            for(let i = 0; i < numPages; i++) { \r\n                indexPages.push(i);                                         // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n            }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);         // [true,false,false,false]\r\n        \r\n        return({ queries,setQueries,arrayFiltered,indexPage,itemsPerPage,activePages,indexPages,setIndexPage,setActivePages })\r\n    }\r\n    get data () { return this.getData() }                          // Getter data\r\n\r\n    getSort = () => {                                              // METHOD SORT\r\n        /* Sort */\r\n        const [sortBy, setSortBy] = useState(0);\r\n        let SortByProperty = () => {};\r\n        switch (sortBy) { \r\n            case 1: SortByProperty = (a,b) => { return a.id - b.id }; break;                                    // Sort by id up\r\n            case 2: SortByProperty = (a,b) => { return b.id - a.id }; break;                                    // Sort by id down\r\n            case 3: SortByProperty = (a,b) => { return a.cita.paciente.localeCompare(b.cita.paciente) }; break; // Sort by paciente up\r\n            case 4: SortByProperty = (a,b) => { return b.cita.paciente.localeCompare(a.cita.paciente) }; break; // Sort by paciente down\r\n            case 5: SortByProperty = (a,b) => { return a.cita.fecha.localeCompare(b.cita.fecha) }; break;       // Sort by fecha up\r\n            case 6: SortByProperty = (a,b) => { return b.cita.fecha.localeCompare(a.cita.fecha) }; break;       // Sort by fecha down\r\n            case 7: SortByProperty = (a,b) => { return a.cita.hora.localeCompare(b.cita.hora) }; break;         // Sort by hora up\r\n            case 8: SortByProperty = (a,b) => { return b.cita.hora.localeCompare(a.cita.hora) }; break;         // Sort by hora down\r\n            case 9: SortByProperty = (a,b) => { return a.cita.consultorio.localeCompare(b.cita.consultorio) }; break;  // Sort by consultorio up\r\n            case 10: SortByProperty = (a,b) => { return b.cita.consultorio.localeCompare(a.cita.consultorio) }; break; // Sort by consultorio down\r\n            case 11: SortByProperty = (a,b) => { return a.cita.doctor.localeCompare(b.cita.doctor) }; break;    // Sort by doctor up\r\n            case 12: SortByProperty = (a,b) => { return b.cita.doctor.localeCompare(a.cita.doctor) }; break;    // Sort by doctor down\r\n            case 13: SortByProperty = (a,b) => { return a.cita.tratamiento.localeCompare(b.cita.tratamiento) }; break; // Sort by tratamiento up\r\n            case 14: SortByProperty = (a,b) => { return b.cita.tratamiento.localeCompare(a.cita.tratamiento) }; break; // Sort by tratamiento down\r\n            default: SortByProperty = () => {}; break;              // Default case to avoid errors\r\n        }\r\n\r\n        return({ SortByProperty, setSortBy })\r\n    }\r\n    get sort () { return this.getSort() }                           // Getter data\r\n\r\n}","import { Cita } from './Cita.js';\r\nimport { Paciente, Doctor } from './User.js';\r\nimport { Especialidad } from './Especialidad.js';\r\nimport { Consultorio } from './Consultorio.js';\r\nimport { Tratamiento } from './Tratamiento.js';\r\n\r\nexport const Classes = { \r\n                cita: { Classe: Cita },\r\n                paciente: { Classe: Paciente },\r\n                doctor: { Classe: Doctor },\r\n                consultorio: { Classe: Consultorio },\r\n                tratamiento: { Classe: Tratamiento },\r\n                especialidad: { Classe: Especialidad }\r\n}\r\n\r\nexport default Classes;","import { lazy } from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nconst Modal = lazy(() => import('../components/modal/Modal.js'));\r\nconst Logo = lazy(() => import('../components/icons/logo/Logo.js'));\r\nconst Success = lazy(() => import('../components/icons/alert/Success.js'));\r\nconst Warning = lazy(() => import('../components/icons/alert/Warning.js'));\r\nconst Error = lazy(() => import('../components/icons/alert/Error.js'));\r\n\r\nexport class Alert {\r\n    constructor({ type='default',title='', message='', buttons='' }) {\r\n        this.type = {type}.type;\r\n        this.title = {title}.title;\r\n        this.message = {message}.message;\r\n        this.buttons = {buttons}.buttons;\r\n    }\r\n   \r\n    launch = () => {       \r\n        const icons = {\r\n            default: { Icon:Logo, iconColor:'#5285c5' },\r\n            success: { Icon:Success, iconColor:'#0f0' },\r\n            warning: { Icon:Warning, iconColor:'#f8bb86' },\r\n            error: { Icon:Error, iconColor:'#f00' }\r\n        }\r\n\r\n        if( !document.getElementById('modal') ) { document.getElementById('root').insertAdjacentHTML('afterend',`<div id=\"modal\"></div>`); } // Create element Alert in the body if there's no one\r\n\r\n        const root = createRoot( document.getElementById('modal') );\r\n        root.render( <Modal Icon={icons[this.type].Icon} iconColor={icons[this.type].iconColor} title={this.title} fontFamily={'century-gothic'} /> );\r\n    }\r\n}","import { Alert as AlertClass } from '../../classes/Alert.js';\r\n\r\nexport const Alert = ({ type, title, message, buttons }) => {\r\n    return ( new AlertClass({ type:type, title:title, message:message, buttons:buttons }) )\r\n}","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","export const getData = async( urlApi ) => {\r\n    let responseFetch = { data: {}, status: 0 };\r\n    await fetch( urlApi )\r\n        .then(response => { responseFetch.status = response.status; return response.json() })\r\n        .then(data => responseFetch.data = data)\r\n        .catch((error) =>{\r\n            if(error.message === 'Failed to fetch') { responseFetch.status = 500 }\r\n        });\r\n    \r\n    return responseFetch;\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nimport { getData } from '../helpers/getData.js';\r\n\r\nexport const useFetch = ( urlApi ) => {\r\n    const [responseFetch, setResponseFetch] = useState({ data: [], status: 0 });\r\n    useEffect( () => { \r\n        getData( urlApi )\r\n            .then( datos => setResponseFetch({ data: datos.data, status: datos.status }) ) \r\n            .catch((error) => console.log(\"Error useFetch: \" + error.message));\r\n    }, []);\r\n\r\n    return responseFetch;\r\n}"],"names":["urlApiPacientes","process","urlApiDoctores","User","constructor","_ref","nombre","apellido","this","Paciente","_ref2","identificacion","genero","eps","super","getApi","getTitles","titles","state","forEach","parameter","index","title","key","charAt","toUpperCase","slice","type","placeholders","item","push","getState","_ref3","nomb","ape","id","gen","eps_","setNombre","useState","setApellido","setIdentificacion","setGenero","setEps","value","handleChange","decode","getData","arrayFetch","useFetch","useEffect","status","Alert","launch","array","useMemo","JSON","stringify","data","undefined","length","queryCode","setQueryCode","queryIdentification","setQueryIdentification","queryName","setQueryName","queryLastname","setQueryLastname","queryGender","setQueryGender","queryEps","setQueryEps","queries","setQueries","arrayFiltered","code","arguments","identification","name","lastname","gender","filter","_id","toString","includes","paciente","toLowerCase","getPacientesFiltered","itemsPerPage","setItemPerPage","indexPage","setIndexPage","numPages","Math","floor","resPages","indexPages","activePage","i","activePages","setActivePages","getSort","sortBy","setSortBy","SortByProperty","a","b","localeCompare","api","getUser","user","sort","Doctor","_ref4","especialidad","_ref5","esp","setEspecialidad","querySpeciality","setQuerySpeciality","speciality","doctor","getDoctoresFiltered","urlApi","Especialidad","getEspecialidadesFiltered","setItemsPerPage","Consultorio","numero","num","setNumero","queryNumber","setQueryNumber","number","consultorio","getConsultoriosFiltered","Tratamiento","cons","doc","setConsultorio","setDoctor","querySpecialty","setQuerySpecialty","queryConsultoryRoom","setQueryConsultoryRoom","queryDoctor","setQueryDoctor","specialty","consultoryRoom","tratamiento","getTratamientosFiltered","Classes","cita","Classe","pac","trat","setPaciente","fecha","setFecha","getDate","hora","setHora","getTime","setTratamiento","queryPatient","setQueryPatient","queryDate","setQueryDate","queryTime","setQueryTime","queryTreatment","setQueryTreatment","patient","date","time","treatment","getCitasFiltered","Modal","lazy","Logo","Success","Warning","Error","message","buttons","icons","default","Icon","iconColor","success","warning","error","document","getElementById","insertAdjacentHTML","createRoot","render","_jsx","fontFamily","AlertClass","InvalidTokenError","base64UrlDecode","str","output","replace","decodeURIComponent","atob","m","p","charCodeAt","b64DecodeUnicode","err","jwtDecode","token","options","pos","header","part","split","decoded","e","parse","prototype","responseFetch","setResponseFetch","async","fetch","then","response","json","catch","datos","console","log"],"sourceRoot":""}