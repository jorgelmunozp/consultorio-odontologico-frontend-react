{"version":3,"file":"static/js/7654.be20f9b7.chunk.js","mappings":"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","sources":["components/crud/UpdateItem.js","helpers/fetchUpdate.js"],"sourcesContent":["import '../../alerts/modal/modal.css';\r\nimport { lazy, useState }  from \"react\";\r\nimport { useThemeContext } from \"../../theme/ThemeContext.js\";\r\nimport { useCrudFactory } from '../../hooks/useCrudFactory.js';\r\nimport { useAlertContext } from '../../alerts/AlertContext.js';\r\nimport { fetchUpdate } from '../../helpers/fetchUpdate.js';\r\nimport { myColor } from '../../global.js';\r\n\r\nconst Input = lazy(() => import('../forms/inputs/Input.js'));\r\nconst Dropdown = lazy(() => import('../forms/dropdown/Dropdown.js'));\r\n\r\nexport const UpdateItem = ({ classType, Icon, item, urlApi, setOpen, handleItems }) => { \r\n  const { theme } = useThemeContext();                            // 👈 Call the global theme\r\n  const { alert } = useAlertContext();\r\n  \r\n  // 👇 Guarda la key del dropdown abierto\r\n  const [openDropdownKey, setOpenDropdownKey] = useState(null);\r\n\r\n  let initialValues = {};\r\n  switch( classType ) {\r\n    case 'cita': initialValues = { paciente:item[classType].paciente, consultorio:item[classType].consultorio, doctor:item[classType].doctor, tratamiento:item[classType].tratamiento }; break;\r\n    case 'paciente': initialValues = { nombre:item[classType].nombre, apellido:item[classType].apellido, identificacion:item[classType].identificacion, genero:item[classType].genero, eps_:item[classType].eps }; break;\r\n    case 'doctor': initialValues = { nombre:item[classType].nombre, apellido:item[classType].apellido, identificacion:item[classType].identificacion, genero:item[classType].genero, especialidad:item[classType].especialidad }; break;\r\n    case 'consultorio': initialValues = { numero:item[classType].numero, nombre:item[classType].nombre }; break;\r\n    case 'especialidad': initialValues = { nombre:item[classType].nombre }; break;\r\n    case 'tratamiento': initialValues = { especialidad:item[classType].especialidad, consultorio:item[classType].consultorio, doc:item[classType].doctor }; break;\r\n    default: initialValues = {}; break;\r\n  }\r\n\r\n  const state = useCrudFactory({ classType:classType, initialValues:initialValues }).state;\r\n\r\n  const handleClose = () => { setOpen(false); }                                 // Gestiona el cierre del modal\r\n\r\n  const handleUpdate = () => {\r\n    if( state.every( property => property.value !== '') ) {                     // Check for emtpy fields to avoid any empty item\r\n      state.forEach((property) => { item[classType][property.key] = property.value });   // Actualiza los nuevos valores en el item\r\n\r\n      const dataItem = JSON.stringify({ [classType]: item[classType] }); \r\n\r\n      fetchUpdate(urlApi,dataItem,item._id).then(                               // Fetch PUT para actualización de datos\r\n        async (responseStatus) => {\r\n            if(200 <= responseStatus && responseStatus <= 299) { \r\n              handleItems('update',item._id, classType);                        // El padre actualiza el estado y React re-renderiza con el elemento actualizado\r\n              \r\n              alert({ type:'success', title:'Actualización exitosa', buttons:1 });\r\n            }\r\n          else { alert({ type:'error', title:'Error en la actualización', buttons:1 }) }\r\n        },\r\n        (error) => { alert({ type:'error', title:'Error en la actualización', buttons:1 }); console.log('Error Update: ', error) }\r\n      )\r\n    }\r\n  };\r\n\r\n  return (\r\n      <>\r\n        <div className={'modalContainer justify-items-center'}>\r\n          <div className={'modalBox'} data-theme={theme}>\r\n            <div className={'modalHeader'}>\r\n              <center><Icon color={myColor} height={2.5} width={2.5} strokeWidth={0.6} className={'center'} /></center>\r\n              <h6 className={'modalTitle main-color pt-2'}>{ \"Actualizar \" + classType.charAt(0).toUpperCase() + classType.slice(1) + \"?\" }</h6>\r\n            </div>\r\n            <div className={'modalContent'}>\r\n              <div className='container-fluid modalTable mt-2'>\r\n                <div className='row bg-row flex-nowrap'>\r\n                  <Input placeholder={'Código'} value={item._id} type={'text'} className={'input form-control rounded border-muted border-1 text-muted text-center shadow-sm pe-none'} />\r\n                </div>\r\n                { state.map((property,index)=>{\r\n                    return(\r\n                      <div key={'row'+index} className='row bg-row flex-nowrap'>\r\n                        { property.type === 'dropdown' ? <Dropdown property={property} isOpen={openDropdownKey === property.key} onToggle={() => setOpenDropdownKey(prev => prev === property.key ? null:property.key )} />\r\n                                                       : <div className='col px-0'><Input property={true} value={property.value} type={property.type} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className={'input form-control rounded border-muted border-1 text-muted text-center shadow-sm'} /></div>\r\n                        }\r\n                      </div>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n            <div className={'modalFooter'}>\r\n              <div className={'d-flex mt-2 w-100'}>\r\n                <button className={'aceptBtn w-100'} onClick={() => { handleUpdate(); handleClose(); }}>Actualizar</button>\r\n                <button className={'cancelBtn w-100'} onClick={ handleClose }>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={'darkBackground'} onClick={ handleClose }></div>\r\n      </>\r\n    )\r\n};\r\nexport default UpdateItem;","export const fetchUpdate = async ( urlApi,dataApi,id ) => {\r\n  try {\r\n    const response = await fetch(urlApi + \"/\" + id, {\r\n      method: \"PUT\",\r\n      body: dataApi,\r\n      headers: { \"Content-type\": \"application/json\" }\r\n    });\r\n    response.json();\r\n    if (200 <= response.status && response.status <= 299) {\r\n      console.log('PUT ' + response.status + ' Actualización exitosa');\r\n    } else if (400 <= response.status && response.status <= 499) {\r\n      console.log('PUT ' + response.status + ' Actualización fallida: Error en el envío de datos');\r\n    } else if (500 <= response.status && response.status <= 599) {\r\n      console.log('PUT ' + response.status + ' Actualización fallida: Error en el servidor remoto');\r\n    }\r\n    return response.status;\r\n  } catch (error) {\r\n      const errorMessage = error.toString().split(':')[1].trim();\r\n      if (errorMessage === 'Failed to fetch') { console.log('Actualización fallida: No hay conexión con la base de datos') } \r\n      else { console.log('Actualización fallida: ' + errorMessage) }\r\n  }\r\n}"],"names":["Input","lazy","Dropdown","UpdateItem","_ref","classType","Icon","item","urlApi","setOpen","handleItems","theme","useThemeContext","alert","useAlertContext","openDropdownKey","setOpenDropdownKey","useState","initialValues","paciente","consultorio","doctor","tratamiento","nombre","apellido","identificacion","genero","eps_","eps","especialidad","numero","doc","state","useCrudFactory","handleClose","handleUpdate","every","property","value","forEach","key","dataItem","JSON","stringify","async","dataApi","id","response","fetch","method","body","headers","json","status","console","log","error","errorMessage","toString","split","trim","fetchUpdate","_id","then","responseStatus","type","title","buttons","_jsxs","_Fragment","children","_jsx","className","color","myColor","height","width","strokeWidth","charAt","toUpperCase","slice","placeholder","map","index","isOpen","onToggle","prev","handleChange","onClick"],"sourceRoot":""}