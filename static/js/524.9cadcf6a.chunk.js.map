{"version":3,"file":"static/js/524.9cadcf6a.chunk.js","mappings":"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","sources":["classes/Dropdown.js","components/forms/buttons/BotonFetch.js","components/crud/CreateItem.js","components/crud/create/CreateCita.js","components/forms/dropdown/Dropdown.js","helpers/fetchCreate.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Alert } from '../components/alert/Alert';\r\nimport { useFetch } from '../hooks/useFetch';\r\n\r\nconst apiPacientes = process.env.REACT_APP_API_PACIENTES;               // Apis para obtención de los datos\r\nconst apiDoctores = process.env.REACT_APP_API_DOCTORES;\r\nconst apiConsultorios = process.env.REACT_APP_API_CONSULTORIOS;\r\nconst apiTratamientos = process.env.REACT_APP_API_TRATAMIENTOS;\r\nconst apiEpss = process.env.REACT_APP_API_EPSS;\r\nconst apiGeneros  = process.env.REACT_APP_API_GENEROS;\r\nconst apiEspecialidades  = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport class DropdownClass {\r\n    constructor({ classType:classType='' }) {\r\n        this.classType = {classType}.classType;\r\n    }\r\n\r\n    getData = () => {                                              // METHOD DATA\r\n        /* Fetch */\r\n        let array = [];\r\n        let urlApi = '';\r\n        switch(this.classType) { \r\n          case 'paciente': urlApi= apiPacientes; break;\r\n          case 'doctor': urlApi= apiDoctores; break;\r\n          case 'consultorio': urlApi= apiConsultorios; break;\r\n          case 'tratamiento': urlApi= apiTratamientos; break;\r\n          case 'eps': urlApi= apiEpss; break;\r\n          case 'genero': urlApi= apiGeneros; break;\r\n          case 'especialidad': urlApi= apiEspecialidades; break;\r\n        };\r\n\r\n        const arrayFetch = useFetch(urlApi);\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        if(arrayFetch.data.length !== (0 || undefined)) { array = arrayFetch.data; }\r\n\r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(5);               // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);      // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(array.length/itemsPerPage);     // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = array.length%itemsPerPage;                 // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        let indexPages = [];\r\n        let activePage = [true];                                            // [true]\r\n        if(resPages !== 0 ){\r\n            for(let i = 0; i <= numPages; i++) { \r\n                indexPages.push(i);                                         // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n            }\r\n        } else if(resPages === 0 ){\r\n            for(let i = 0; i < numPages; i++) { \r\n                indexPages.push(i);                                         // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                       // [true,false,false,false]\r\n            }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);         // [true,false,false,false]\r\n        const pagination = { itemsPerPage:itemsPerPage, indexPage:indexPage, activePages:activePages, indexPages:indexPages, setIndexPage:setIndexPage, setActivePages:setActivePages }\r\n\r\n        return({ array, pagination })\r\n    }\r\n    get data () { return this.getData() }                          // Getter data\r\n\r\n}","import { Alert } from '../../alert/Alert';\r\nimport { fetchCreate } from '../../../helpers/fetchCreate';\r\n\r\nexport const BotonFetch = ({ endIcon,title,urlApi,dataApi,setResponseStatus,className }) => {\r\nconsole.log(\"dataApi BotonFetch: \", dataApi)\r\n  const handleClick = () => {\r\n    if( dataApi.length === 0 ) { Alert({ type:'warning', title:'Debes ingresar todos los datos' }).launch() }\r\n    else { fetchCreate(urlApi,dataApi,setResponseStatus) }\r\n  }\r\n\r\n  return ( <button onClick={ handleClick } className={ className }> { title } { endIcon } </button> )\r\n}\r\n","import { useState }  from \"react\";\r\nimport { Alert } from '../alert/Alert';\r\nimport { DropdownClass } from '../../classes/Dropdown';\r\nimport { Cita } from '../../classes/Cita';\r\nimport { Paciente, Doctor } from '../../classes/User';\r\nimport { Especialidad } from '../../classes/Especialidad';\r\nimport { Consultorio } from '../../classes/Consultorio';\r\nimport { Tratamiento } from '../../classes/Tratamiento';\r\nimport { Dropdown } from '../forms/dropdown/Dropdown';\r\nimport { Input } from '../forms/inputs/Input';\r\nimport { BotonFetch } from \"../forms/buttons/BotonFetch\";\r\n\r\nimport sign from 'jwt-encode';                                              // Para firma con jwt\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\nconst jwtSecretKey = process.env.REACT_APP_JWTSECRET;\r\n\r\nexport const CreateItem = ({ classType, Icon, isMenuOpen }) => {\r\n  const [loadData, setLoadData] = useState(false);\r\n  const [responseStatus, setResponseStatus] = useState(0);\r\n  \r\n  const classes = { cita: { Classe: Cita },\r\n                    paciente: { Classe: Paciente },\r\n                    doctor: { Classe: Doctor },\r\n                    consultorio: { Classe: Consultorio },\r\n                    tratamiento: { Classe: Tratamiento },\r\n                    especialidad: { Classe: Especialidad }\r\n  }\r\n\r\n  // --- Clase Item\r\n  const objectClass = new classes[classType].Classe('');                    // Objeto instanciado con la Class correspondiente\r\n  const state = objectClass.state;\r\n  const urlApi = objectClass.api;\r\n  let item = \"\";\r\n\r\nconsole.log(\"state: \", state)\r\n  if(state.filter( property => property.value === '').length === 0 ) {      // Check for emtpy fields to avoid any empty item\r\n    state.forEach(property => objectClass[property.key] = property.value);  // Carga los valores ingresados por el usuario en el objeto\r\n    \r\n    item = `JSON.stringify({                           \r\n      ${classes[classType].Classe.name.toLowerCase()}: ${JSON.stringify(objectClass)}\r\n    })`; \r\nconsole.log(\"item: \", item)\r\n  } \r\n\r\n  if( 200 <= responseStatus && responseStatus <= 299 ) {\r\n    console.log(\"state CreateItem: \", state)\r\n    console.log(\"objectClass CreateItem: \", objectClass)\r\n\r\n//************ NO FUNCIONA: -->\r\n    state.forEach( property => property.setState('') );                     // Reinicia todas las variables  \r\n        state.forEach(property => objectClass[property.key] = '');          // Reinicia los valores ingresados por el usuario en el objeto\r\n\r\n    Alert({ type:'success', title:'Registro exitoso' }).launch();\r\n    setResponseStatus(0);\r\n  } else if( 400 <= responseStatus && responseStatus <= 499 ) {\r\n    Alert({ type:'error', title:'Error en el registro' }).launch();\r\n    setResponseStatus(0);\r\n  } else if( 500 <= responseStatus && responseStatus <= 599 ) {\r\n    Alert({ type:'error', title:'Error en el registro' }).launch();\r\n    setResponseStatus(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='mt-4 mt-sm-5'>\r\n        <center>\r\n          <h5 className='century-gothic main-color fs-sm-2'>Registrar { classType.charAt(0).toUpperCase() + classType.slice(1) }</h5>\r\n        </center>\r\n        <div className={'container-fluid mt-2 mt-sm-5 pe-0 pe-md-5 px-0 me-0 smooth ' + (isMenuOpen ? ' w-responsive':' px-sm-5 w-100' )}>\r\n          {\r\n            state.map((property) => {\r\n              const myDropdown = new DropdownClass({ classType:property.key });\r\n              const { array, pagination } = myDropdown.getData();\r\n\r\n              return(\r\n                <div key={'row'+property.key} className='row'>\r\n                  { property.type === 'dropdown' ? <div className='col'><Dropdown classType={property.key} array={array} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} pagination={pagination} className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"} /></div>\r\n                                                 : <div className='col'><Input type={property.type} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className={'input form-control rounded border-muted border-1 text-muted text-center shadow-sm'} /></div>\r\n                  }\r\n                </div>\r\n              )})\r\n          }\r\n          <div className='row mt-4 mt-sm-5'>\r\n            <div className='col'>\r\n              <BotonFetch endIcon={<Icon />} title={'Registrar'} urlApi={urlApi} dataApi={item} setResponseStatus={setResponseStatus} className={'button rounded border-0 py-3 shadow-sm'} ></BotonFetch>\r\n            </div>\r\n          </div>              \r\n\t\t\t  </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import { CreateItem } from '../CreateItem';\r\n\r\nexport const CreateCita = ({ Icon, isMenuOpen }) => {\r\n  return ( <CreateItem classType={'cita'} Icon={Icon} isMenuOpen={isMenuOpen} /> )\r\n}\r\n\r\nexport default CreateCita;","import { useState } from 'react';\r\nimport { PaginationBar } from '../../pagination/PaginationBar';\r\nimport '../forms.css';\r\n\r\nimport * as jose from 'jose'\r\nimport sign from 'jwt-encode';                                                  // Para firma con jwt\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst jwtSecretKey = process.env.REACT_APP_JWTSECRET;\r\n\r\n\r\nexport const Dropdown = ({ classType, placeholder, array, defaultSelect='', handleChange, pagination, className }) => {\r\n  let [value, setValue] = useState( defaultSelect );\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const class1 = ' dropdown-toggle text-start pt-2 ps-2 ps-sm-3 pe-5 w-100';\r\n  const class2 = ' dropdown-toggle text-center pt-4 ps-2 ps-sm-3 pe-5 w-100';\r\n\r\n  return(\r\n    <div className=\"dropdown form-floating w-100 min-width-10 py-sm-0 px-0\" >\r\n      <button onClick={ () => open === false ? setOpen(true):setOpen(false) } onChange={ handleChange } className={ className + (value.length === 0 ? class1 : class2) } type=\"button\" id=\"selectButton\" data-bs-target={\"#dropdownMenu\"+classType} aria-controls={\"dropdownMenu\"+classType} aria-expanded=\"false\">{ value.length === 0 ? placeholder : value }</button>\r\n      <label htmlFor=\"selectButton\" className=\"form-label text-muted text-nowrap text-truncate\">{ value.length === 0 ? '' : placeholder }</label>\r\n\r\n      <ul id={\"dropdownMenu\"+classType} className={\"dropdown-menu text-center shadow-sm w-100 overflow-auto slideIn smooth\" + (open ? \" collapse show\" : \"\")} style={ array.length === 0 ? {\"maxHeight\":\"0rem\"} : {\"maxHeight\":\"12rem\"} } aria-labelledby=\"selectButton\">\r\n        { array.slice(pagination.indexPage[0],pagination.indexPage[1]).map((option, index) => {\r\n            switch( classType ) {\r\n              case 'paciente': value=option[classType].nombre+ \" \" + option[classType].apellido; break;\r\n              case 'doctor': value=option[classType].nombre + \" \" + option[classType].apellido; break;\r\n              case 'consultorio': value=option[classType].numero + \" \" + option[classType].nombre; break;\r\n              case 'tratamiento': value=option[classType].especialidad; break;\r\n              case 'eps': value=option[classType].nombre; break;\r\n              case 'genero': value=option[classType].nombre; break;\r\n              case 'especialidad': value=option[classType].nombre; break;\r\n            }\r\n            return ( <Options key={ classType+'Option'+index } value={value} setValue={setValue} setOpen={setOpen} handleChange={handleChange} /> );\r\n          })\r\n        }\r\n        <PaginationBar array={array} itemsPerPage={pagination.itemsPerPage} indexPage={pagination.indexPage} activePages={pagination.activePages} indexPages={pagination.indexPages} setIndexPage={pagination.setIndexPage} setActivePages={pagination.setActivePages} />\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Options = ({ value, setValue, setOpen, handleChange  }) => {\r\n  return ( <li><button className=\"dropdown-item\" value={ sign(value,jwtSecretKey) } onClick={ (event) => { setValue( decode(event.target.value) ); setOpen(false); handleChange(event)} }>{ value }</button></li> );\r\n}","export const fetchCreate = ( urlApi,dataApi,setResponseStatus ) => {\r\n    fetch(urlApi, {\r\n      method: \"POST\",\r\n      body: eval( dataApi ),\r\n      headers: { \"Content-type\": \"application/json\" }\r\n    }).then((response) => {\r\n      response.json();\r\n      if(200 <= response.status && response.status <= 299){\r\n        console.log('POST ' + response.status + ' Registro exitoso')\r\n        setResponseStatus(response.status);\r\n      } else if(400 <= response.status && response.status <= 499){\r\n        console.log('POST ' + response.status + ' Registro fallido: ' + 'Error en el envío de datos')\r\n        setResponseStatus(response.status);\r\n      } else if(500 <= response.status && response.status <= 599){\r\n        console.log('POST ' + response.status + ' Registro fallido: ' + 'Error en el servidor remoto')\r\n        setResponseStatus(response.status);\r\n      }\r\n    }).catch((error) => {\r\n      const errorMessage = error.toString().split(':')[1].trim();\r\n      if(errorMessage === 'Failed to fetch') {\r\n        console.log(error.status +' Registro fallido')\r\n        setResponseStatus('Registro fallido: ' + 'No hay conexión con la base de datos');\r\n      } else {\r\n        setResponseStatus('Registro fallido: ' + errorMessage);\r\n      }     \r\n    });\r\n}"],"names":["DropdownClass","constructor","_ref","classType","getData","array","urlApi","this","process","arrayFetch","useFetch","useEffect","status","Alert","type","title","launch","undefined","data","length","itemsPerPage","setItemsPerPage","useState","indexPage","setIndexPage","numPages","Math","floor","resPages","indexPages","activePage","i","push","activePages","setActivePages","pagination","BotonFetch","endIcon","dataApi","setResponseStatus","className","console","log","_jsxs","onClick","handleClick","fetchCreate","children","CreateItem","Icon","isMenuOpen","loadData","setLoadData","responseStatus","classes","cita","Classe","Cita","paciente","Paciente","doctor","Doctor","consultorio","Consultorio","tratamiento","Tratamiento","especialidad","Especialidad","objectClass","state","api","item","filter","property","value","forEach","key","name","toLowerCase","JSON","stringify","setState","_jsx","charAt","toUpperCase","slice","map","myDropdown","Dropdown","handleChange","placeholder","Input","CreateCita","defaultSelect","setValue","open","setOpen","onChange","id","htmlFor","style","option","index","nombre","apellido","numero","Options","PaginationBar","_ref2","sign","event","decode","target","fetch","method","body","eval","headers","then","response","json","catch","error","errorMessage","toString","split","trim"],"sourceRoot":""}