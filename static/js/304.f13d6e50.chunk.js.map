{"version":3,"file":"static/js/304.f13d6e50.chunk.js","mappings":"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","sources":["components/crud/create/CreatePaciente.js","classes/Dropdown.js","components/forms/dropdown/Dropdown.js","helpers/fetchCreate.js","components/forms/buttons/BotonFetch.js","components/crud/CreateItem.js"],"sourcesContent":["import { CreateItem } from '../CreateItem';\r\n\r\nexport const CreatePaciente = ({ Icon, isMenuOpen }) => {\r\n  return ( <CreateItem classType={'paciente'} Icon={Icon} isMenuOpen={isMenuOpen} /> )\r\n}\r\n\r\nexport default CreatePaciente;","import { useState, useEffect } from \"react\";\r\nimport { Alert } from '../components/alert/Alert';\r\nimport { useFetch } from '../hooks/useFetch';\r\n\r\nconst apiPacientes = process.env.REACT_APP_API_PACIENTES;           // Apis para obtención de los datos\r\nconst apiDoctores = process.env.REACT_APP_API_DOCTORES;\r\nconst apiConsultorios = process.env.REACT_APP_API_CONSULTORIOS;\r\nconst apiTratamientos = process.env.REACT_APP_API_TRATAMIENTOS;\r\nconst apiEpss = process.env.REACT_APP_API_EPSS;\r\nconst apiGeneros  = process.env.REACT_APP_API_GENEROS;\r\nconst apiEspecialidades  = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport class Dropdown {\r\n    constructor({ classType:classType='' }) {\r\n        this.classType = {classType}.classType;\r\n    }\r\n\r\n    getValue = ({ defaultValue:defaultValue='' }) => {              // METHOD VALUE\r\n        let [value, setValue] = useState( defaultValue );\r\n        \r\n        return ({ value, setValue })\r\n    }\r\n    get value () { return this.getValue({ defaultValue:'' }) }      // Getter value\r\n\r\n\r\n    getData = () => {                                               // METHOD DATA\r\n        /* Fetch */\r\n        let array = [];\r\n        let urlApi = '';\r\n        switch(this.classType) { \r\n          case 'paciente': urlApi= apiPacientes; break;\r\n          case 'doctor': urlApi= apiDoctores; break;\r\n          case 'consultorio': urlApi= apiConsultorios; break;\r\n          case 'tratamiento': urlApi= apiTratamientos; break;\r\n          case 'eps': urlApi= apiEpss; break;\r\n          case 'genero': urlApi= apiGeneros; break;\r\n          case 'especialidad': urlApi= apiEspecialidades; break;\r\n        };\r\n\r\n        const arrayFetch = useFetch(urlApi);\r\n        useEffect(() => { if(arrayFetch.status >= 400) { Alert({ type:'error', title:'Error en la conexión con la base de datos' }).launch() } },[arrayFetch]);\r\n        if(arrayFetch.data.length !== (0 || undefined)) { array = arrayFetch.data; }\r\n\r\n        /* Pagination */\r\n        const [itemsPerPage, setItemsPerPage ] = useState(5);           // Se define el número de items por página\r\n        const [indexPage, setIndexPage ] = useState([0,itemsPerPage]);  // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n        const numPages = Math.floor(array.length/itemsPerPage);         // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n        const resPages = array.length%itemsPerPage;                     // Se calcula la cantidad de páginas faltantes = cantidad de items%item por página\r\n        let indexPages = [];\r\n        let activePage = [true];                                        // [true]\r\n        if(resPages !== 0 ){\r\n            for(let i = 0; i <= numPages; i++) { \r\n                indexPages.push(i);                                     // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                   // [true,false,false,false]\r\n            }\r\n        } else if(resPages === 0 ){\r\n            for(let i = 0; i < numPages; i++) { \r\n                indexPages.push(i);                                     // [0,1,2,3]\r\n                if(i < 0) { activePage.push(false); }                   // [true,false,false,false]\r\n            }\r\n        }\r\n        const [activePages, setActivePages] = useState(activePage);     // [true,false,false,false]\r\n        const pagination = { itemsPerPage:itemsPerPage, indexPage:indexPage, activePages:activePages, indexPages:indexPages, setIndexPage:setIndexPage, setActivePages:setActivePages }\r\n\r\n        return ({ array, pagination })\r\n    }\r\n    get data () { return this.getData() }                          // Getter data\r\n\r\n}","import { useState } from 'react';\r\nimport { PaginationBar } from '../../pagination/PaginationBar';\r\nimport '../forms.css';\r\n\r\nimport sign from 'jwt-encode';                                                  // Para firma con jwt\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst jwtSecretKey = process.env.REACT_APP_JWTSECRET;\r\n\r\n\r\nexport const Dropdown = ({ classType, object, placeholder='', array=[], defaultSelect='', handleChange, pagination, className='' }) => {\r\n  const [open, setOpen] = useState(false)\r\n  let { value, setValue } = object.getValue({ defaultValue:defaultSelect })\r\n\r\n  const class1 = ' dropdown-toggle text-start pt-2 ps-2 ps-sm-3 pe-5 w-100';\r\n  const class2 = ' dropdown-toggle text-center pt-4 ps-2 ps-sm-3 pe-5 w-100';\r\n\r\n  return(\r\n    <div className=\"dropdown form-floating w-100 min-width-10 py-sm-0 px-0\" >\r\n      <button onClick={ () => open === false ? setOpen(true):setOpen(false) } onChange={ handleChange } className={ className + (value.length === 0 ? class1 : class2) } type=\"button\" id={\"selectButton\"+classType} data-bs-target={\"#dropdownMenu\"+classType} aria-controls={\"dropdownMenu\"+classType} aria-expanded=\"false\">{ value.length === 0 ? placeholder : value }</button>\r\n      <label htmlFor=\"selectButton\" className=\"form-label text-muted text-nowrap text-truncate\">{ value.length === 0 ? '' : placeholder }</label>\r\n\r\n      <ul id={\"dropdownMenu\"+classType} className={\"dropdown-menu text-center shadow-sm w-100 overflow-auto slideIn smooth\" + (open ? \" collapse show\" : \"\")} style={ array.length === 0 ? {\"maxHeight\":\"0rem\"} : {\"maxHeight\":\"12rem\"} } aria-labelledby=\"selectButton\">\r\n        { array.slice(pagination.indexPage[0],pagination.indexPage[1]).map((option, index) => {\r\n            switch( classType ) {\r\n              case 'paciente': value=option[classType].nombre+ \" \" + option[classType].apellido; break;\r\n              case 'doctor': value=option[classType].nombre + \" \" + option[classType].apellido; break;\r\n              case 'consultorio': value=option[classType].numero + \" \" + option[classType].nombre; break;\r\n              case 'tratamiento': value=option[classType].especialidad; break;\r\n              case 'eps': value=option[classType].nombre; break;\r\n              case 'genero': value=option[classType].nombre; break;\r\n              case 'especialidad': value=option[classType].nombre; break;\r\n            }\r\n            return ( <Options key={ classType+'Option'+index } value={value} setValue={setValue} setOpen={setOpen} handleChange={handleChange} /> );\r\n          })\r\n        }\r\n        <PaginationBar array={array} itemsPerPage={pagination.itemsPerPage} indexPage={pagination.indexPage} activePages={pagination.activePages} indexPages={pagination.indexPages} setIndexPage={pagination.setIndexPage} setActivePages={pagination.setActivePages} />\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Options = ({ value, setValue, setOpen, handleChange  }) => {\r\n  return ( <li><button className=\"dropdown-item\" value={ sign(value,jwtSecretKey) } onClick={ (event) => { setValue( decode(event.target.value) ); setOpen(false); handleChange(event)} }>{ value }</button></li> );\r\n}","export const fetchCreate = ( urlApi,dataApi,setResponseStatus ) => {\r\n    fetch(urlApi, {\r\n      method: \"POST\",\r\n      body: eval( dataApi ),\r\n      headers: { \"Content-type\": \"application/json\" }\r\n    }).then((response) => {\r\n      response.json();\r\n      if(200 <= response.status && response.status <= 299){\r\n        console.log('POST ' + response.status + ' Registro exitoso')\r\n        setResponseStatus(response.status);\r\n      } else if(400 <= response.status && response.status <= 499){\r\n        console.log('POST ' + response.status + ' Registro fallido: ' + 'Error en el envío de datos')\r\n        setResponseStatus(response.status);\r\n      } else if(500 <= response.status && response.status <= 599){\r\n        console.log('POST ' + response.status + ' Registro fallido: ' + 'Error en el servidor remoto')\r\n        setResponseStatus(response.status);\r\n      }\r\n    }).catch((error) => {\r\n      const errorMessage = error.toString().split(':')[1].trim();\r\n      if(errorMessage === 'Failed to fetch') {\r\n        console.log(error.status +' Registro fallido')\r\n        setResponseStatus('Registro fallido: ' + 'No hay conexión con la base de datos');\r\n      } else {\r\n        setResponseStatus('Registro fallido: ' + errorMessage);\r\n      }     \r\n    });\r\n}","import { Alert } from '../../alert/Alert';\r\nimport { fetchCreate } from '../../../helpers/fetchCreate';\r\n\r\nexport const BotonFetch = ({ endIcon,title,urlApi,dataApi,setResponseStatus,className }) => {\r\n  const handleClick = () => {\r\n    if( dataApi.length === 0 ) { Alert({ type:'warning', title:'Debes ingresar todos los datos' }).launch() }\r\n    else { fetchCreate(urlApi,dataApi,setResponseStatus) }\r\n  }\r\n\r\n  return ( <button onClick={ handleClick } className={ className }> { title } { endIcon } </button> )\r\n}\r\n","import { useEffect, useState }  from \"react\";\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport { Alert } from '../alert/Alert';\r\nimport { Dropdown as DropdownClass } from '../../classes/Dropdown';\r\nimport { Cita } from '../../classes/Cita';\r\nimport { Paciente, Doctor } from '../../classes/User';\r\nimport { Especialidad } from '../../classes/Especialidad';\r\nimport { Consultorio } from '../../classes/Consultorio';\r\nimport { Tratamiento } from '../../classes/Tratamiento';\r\nimport { Dropdown } from '../forms/dropdown/Dropdown';\r\nimport { Input } from '../forms/inputs/Input';\r\nimport { BotonFetch } from \"../forms/buttons/BotonFetch\";\r\n\r\nimport sign from 'jwt-encode';                                              // Para firma con jwt\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\nconst jwtSecretKey = process.env.REACT_APP_JWTSECRET;\r\n\r\nexport const CreateItem = ({ classType, Icon, isMenuOpen }) => {\r\n  const [responseStatus, setResponseStatus] = useState(0);\r\n  \r\n  const classes = { cita: { Classe: Cita },\r\n                    paciente: { Classe: Paciente },\r\n                    doctor: { Classe: Doctor },\r\n                    consultorio: { Classe: Consultorio },\r\n                    tratamiento: { Classe: Tratamiento },\r\n                    especialidad: { Classe: Especialidad }\r\n  }\r\n\r\n  // --- Clase Item\r\n  const objectClass = new classes[classType].Classe('');                    // Objeto instanciado con la Class correspondiente\r\n  const state = objectClass.state;\r\n  const urlApi = objectClass.api;\r\n  let item = \"\";\r\n\r\n  if(state.filter( property => property.value === '').length === 0 ) {      // Check for emtpy fields to avoid any empty item\r\n    state.forEach( property => objectClass[property.key] = property.value );// Carga los valores ingresados por el usuario en el objeto\r\n    \r\n    item = `JSON.stringify({                           \r\n      ${classes[classType].Classe.name.toLowerCase()}: ${JSON.stringify(objectClass)}\r\n    })`; \r\n  } \r\n\r\n  if( 200 <= responseStatus && responseStatus <= 299 ) {\r\n    console.log(\"state CreateItem 1: \", state)\r\n//************ SI FUNCIONA PERO NO RENDERIZA: -->\r\n    state.forEach( property => property.setState('') );                    // Reinicia todas las variables  \r\n    // state.forEach( \r\n    //   property => { property.setState('');\r\n    //   const myDropdown = new DropdownClass({ classType:property.key });\r\n    //   const { array, pagination } = myDropdown.getData();\r\n\r\n    //   const row = createRoot(document.getElementById( 'row'+property.key ));\r\n    //   row.render(\r\n    //     <>\r\n    //       { property.type === 'dropdown' ? <div className='col'><Dropdown classType={property.key} object={myDropdown} array={array} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} pagination={pagination} className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"} /></div>\r\n    //                                      : <div className='col'><Input type={property.type} defaultValue={property.value} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className={'input form-control rounded border-muted border-1 text-muted text-center shadow-sm'} /></div>\r\n    //       }\r\n    //     </>\r\n    //   )}\r\n    // );                     // Reinicia todas las variables  \r\n    \r\n\r\n\r\n    console.log(\"state CreateItem 2: \", state)\r\n\r\n    Alert({ type:'success', title:'Registro exitoso' }).launch();\r\n    setResponseStatus(0);\r\n  } else if( 400 <= responseStatus && responseStatus <= 499 ) {\r\n    Alert({ type:'error', title:'Error en el registro' }).launch();\r\n    setResponseStatus(0);\r\n  } else if( 500 <= responseStatus && responseStatus <= 599 ) {\r\n    Alert({ type:'error', title:'Error en el registro' }).launch();\r\n    setResponseStatus(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='mt-4 mt-sm-5'>\r\n        <center>\r\n          <h5 className='century-gothic main-color fs-sm-2'>Registrar { classType.charAt(0).toUpperCase() + classType.slice(1) }</h5>\r\n        </center>\r\n        <div className={'container-fluid mt-2 mt-sm-5 pe-0 pe-md-5 px-0 me-0 smooth ' + (isMenuOpen ? ' w-responsive':' px-sm-5 w-100' )}>\r\n          {\r\n            state.map((property) => {\r\n              const myDropdown = new DropdownClass({ classType:property.key });\r\n              const { array, pagination } = myDropdown.data;\r\n\r\n              return (\r\n                <div key={'row'+property.key} id={'row'+property.key} className='row'>\r\n                  <>\r\n                  { property.type === 'dropdown' ? <div className='col'><Dropdown classType={property.key} object={myDropdown} array={array} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} pagination={pagination} className={\"input form-control rounded border-muted border-1 text-muted shadow-sm\"} /></div>\r\n                                                 : <div className='col'><Input type={property.type} defaultValue={property.value} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className={'input form-control rounded border-muted border-1 text-muted text-center shadow-sm'} /></div>\r\n                  }\r\n                  </>\r\n                </div>\r\n              )})\r\n          }\r\n          <div className='row mt-4 mt-sm-5'>\r\n            <div className='col'>\r\n              <BotonFetch endIcon={<Icon />} title={'Registrar'} urlApi={urlApi} dataApi={item} setResponseStatus={setResponseStatus} className={'button rounded border-0 py-3 shadow-sm'} ></BotonFetch>\r\n            </div>\r\n          </div>              \r\n\t\t\t  </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":["CreatePaciente","_ref","Icon","isMenuOpen","_jsx","CreateItem","classType","Dropdown","constructor","getValue","_ref2","defaultValue","value","setValue","useState","getData","array","urlApi","this","process","arrayFetch","useFetch","useEffect","status","Alert","type","title","launch","undefined","data","length","itemsPerPage","setItemsPerPage","indexPage","setIndexPage","numPages","Math","floor","resPages","indexPages","activePage","i","push","activePages","setActivePages","pagination","object","placeholder","defaultSelect","handleChange","className","open","setOpen","_jsxs","children","onClick","onChange","id","htmlFor","style","slice","map","option","index","nombre","apellido","numero","especialidad","Options","PaginationBar","sign","event","decode","target","fetchCreate","dataApi","setResponseStatus","fetch","method","body","eval","headers","then","response","json","console","log","catch","error","errorMessage","toString","split","trim","BotonFetch","endIcon","handleClick","responseStatus","classes","cita","Classe","Cita","paciente","Paciente","doctor","Doctor","consultorio","Consultorio","tratamiento","Tratamiento","Especialidad","objectClass","state","api","item","filter","property","forEach","key","name","toLowerCase","JSON","stringify","setState","charAt","toUpperCase","myDropdown","DropdownClass","_Fragment","Input"],"sourceRoot":""}