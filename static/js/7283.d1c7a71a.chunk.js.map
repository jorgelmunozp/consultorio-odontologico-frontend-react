{"version":3,"file":"static/js/7283.d1c7a71a.chunk.js","mappings":"gQAIO,MAAMA,GAAQC,EAAAA,EAAAA,MAAKC,IAAwE,IAAvE,KAAEC,EAAK,GAAE,YAAEC,EAAY,GAAE,MAAEC,EAAM,GAAE,aAAEC,EAAY,UAAEC,EAAU,IAAIL,EACxF,MAAM,MAAEM,IAAUC,EAAAA,EAAAA,MAGZC,GAAoBC,EAAAA,EAAAA,aAAaC,GAAUN,EAAaM,EAAMC,OAAOR,OAAQ,CAACC,IAE9EQ,EAAUV,EAAc,QAE9B,OACIW,EAAAA,EAAAA,MAAA,OAAKR,UAAU,qEAAqE,yBAAmBS,SAAA,EACnGC,EAAAA,EAAAA,KAAA,SAAOd,KAAOA,EAAOE,MAAQA,EAAQa,SAAWR,EAAoBS,GAAKL,EAAUV,YAAcA,EAAcG,UAAYA,EAAY,4CAA8Ca,aAAa,MAAM,aAAYZ,KACpNS,EAAAA,EAAAA,KAAA,SAAOI,QAAUjB,EAAY,QAAUG,UAAU,sDAAsD,aAAYC,EAAMQ,SAAGZ,SAKxI,GAAeH,EAAAA,EAAAA,MAAKD,E","sources":["components/forms/inputs/Input.js"],"sourcesContent":["import '../forms.css';\r\nimport { memo, useCallback } from 'react';\r\nimport { useThemeContext } from '../../../theme/ThemeContext.js';\r\n\r\nexport const Input = memo(({ type='', placeholder='', value='', handleChange, className='' }) => {\r\n    const { theme } = useThemeContext();       // ðŸ‘ˆ Call the global theme\r\n\r\n    // ðŸ‘‡ Memoriza el handler para no recrearlo en cada render\r\n    const handleInputChange = useCallback((event) => handleChange(event.target.value), [handleChange]); // ðŸ‘ˆ depende de handleChange, asÃ­ no se rompe\r\n\r\n    const inputId = placeholder + 'Input'; // ðŸ‘ˆ calculado una sola vez por render\r\n\r\n    return (\r\n        <div className=\"form-floating text-center text-nowrap text-truncate px-0 shadow-sm\" data-mdb-input-init>\r\n            <input type={ type } value={ value } onChange={ handleInputChange } id={ inputId } placeholder={ placeholder } className={ className + \" text-nowrap text-truncate bg-transparent\" } autoComplete=\"off\" data-theme={theme}/>\r\n            <label htmlFor={ placeholder+'Input' } className=\"form-label text-nowrap text-truncate bg-transparent\" data-theme={theme}>{ placeholder }</label>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default memo(Input);\r\n\r\n// export default memo(Input, (prev, next) => \r\n//   prev.type === next.type &&\r\n//   prev.placeholder === next.placeholder &&\r\n//   prev.value === next.value &&\r\n//   prev.className === next.className\r\n// );"],"names":["Input","memo","_ref","type","placeholder","value","handleChange","className","theme","useThemeContext","handleInputChange","useCallback","event","target","inputId","_jsxs","children","_jsx","onChange","id","autoComplete","htmlFor"],"sourceRoot":""}