{"version":3,"file":"static/js/5495.db168b89.chunk.js","mappings":"iMAEO,MAAMA,EAAWA,KACpB,MAAMC,EAAOC,SAASC,eAAe,QAC/BC,EAAgBC,aAAaC,QAAQ,UACnCC,EAAOC,IAAaC,EAAAA,EAAAA,UAAUL,GAAgCH,EAAKS,QAAQH,OAE/EH,IAAkBH,EAAKS,QAAQH,MAAQH,GAc3C,MAAO,CAAEG,EAXWI,KAChB,MAAMC,EAASV,SAASC,eAAe,UAEvC,GACS,UADAI,EACSN,EAAKS,QAAQH,MAAM,OAAQK,EAAOF,QAAQH,MAAM,OAAQF,aAAaQ,QAAQ,QAAS,QAASL,EAAS,aAE7GP,EAAKS,QAAQH,MAAM,QAASK,EAAOF,QAAQH,MAAM,QAASF,aAAaQ,QAAQ,QAAS,SAAUL,EAAS,W,kCCdzH,MAAMM,GAAcC,E,QAAAA,gB,2FCApB,MAAMC,EAAc,WAAyB,IAAxBC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGG,EAAMH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAASC,EAAOC,MACZ,KAAKC,EAAAA,EAAMC,MAAO,MAAO,IAAKH,EAAOI,QAASC,QAAQ,GACtD,KAAKH,EAAAA,EAAMI,OAAQ,MAAO,CAAED,QAAQ,GACpC,QAAS,OAAOT,EAExB,E,uBCJA,MAAMW,GAAYC,EAAAA,EAAAA,MAAK,IAAM,qDAEvBC,EAAOA,IAAeC,KAAKC,MAAM3B,aAAaC,QAAQ,UAAa,CAAEoB,QAAQ,GAEtEO,EAAMC,IAAe,IAAd,KAAEC,GAAMD,EAC1B,MAAQE,EAAMC,IAAaC,EAAAA,EAAAA,YAAYtB,EAAa,CAAC,EAAGc,IAChDvB,EAAOI,IAAgBX,EAAAA,EAAAA,KAO/B,OALAuC,EAAAA,EAAAA,WAAU,KACJH,GACJ/B,aAAaQ,QAAQ,OAAQkB,KAAKS,UAAUJ,KAC3C,CAACA,KAGFK,EAAAA,EAAAA,KAAC3B,EAAAA,EAAY4B,SAAQ,CAACC,MAAO,CAAEP,OAAKC,YAAWO,UAC7CH,EAAAA,EAAAA,KAACb,EAAS,CAACO,KAAMA,EAAM5B,MAAOA,EAAOI,YAAaA,OAKxD,G,kCCxBO,MAAMY,EAAQ,CACjBC,MAAO,eACPG,OAAQ,gB","sources":["hooks/useTheme.js","auth/authContext.js","auth/authReducer.js","App.js","types/types.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const useTheme = () => {\n    const body = document.getElementById('body');\n    const storagedTheme = localStorage.getItem('theme');                                        // Check localstorage for theme preferences stored\n    const [ theme, setTheme ] = useState( storagedTheme ? storagedTheme : body.dataset.theme ); // Theme: Light or Dark\n    \n    if( storagedTheme ) { body.dataset.theme = storagedTheme }                                  // If exist assign any localstoraged theme\n\n    /****** Body and Navbar Theme ******/\n    const handleTheme = () => {\n        const navbar = document.getElementById('navbar');\n\n        switch ( theme ) {\n            case 'light': body.dataset.theme='dark'; navbar.dataset.theme='dark'; localStorage.setItem('theme', 'dark'); setTheme('dark'); break;\n            case 'dark': body.dataset.theme='light'; navbar.dataset.theme='light'; localStorage.setItem('theme', 'light'); setTheme('light'); break;\n            default: body.dataset.theme='light'; navbar.dataset.theme='light'; localStorage.setItem('theme', 'light'); setTheme('light'); break;\n        }\n        // document.getElementById('collapsibleNavbar').classList.remove('show');\n    }\n\n    return [ theme, handleTheme ]\n}","import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext();","import { types } from \"../types/types.js\";\r\n\r\nexport const authReducer = (state = {}, action) => {\r\n    switch ( action.type ) {\r\n        case types.login: return { ...action.payload, logged: true }\r\n        case types.logout: return { logged: false }\r\n        default: return state;\r\n    }\r\n}","import { lazy, useEffect, useReducer } from 'react';\r\nimport { AuthContext } from './auth/authContext.js';\r\nimport { authReducer } from './auth/authReducer.js';\r\nimport { useTheme } from './hooks/useTheme.js';\r\nconst AppRouter = lazy(() => import('./routers/AppRouter.js'));\r\n\r\nconst init = () => { return JSON.parse(localStorage.getItem('user') ) || { logged: false}; }\r\n\r\nexport const App = ({ Logo }) => {\r\n  const [ user, dispatch ] = useReducer( authReducer, {}, init );\r\n  const [ theme, handleTheme ] = useTheme();\r\n\r\n  useEffect(() => {\r\n    if(!user) return;\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }, [user] );\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user,dispatch }}>\r\n      <AppRouter Logo={Logo} theme={theme} handleTheme={handleTheme} />\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;","export const types = {\r\n    login: '[auth] Login',\r\n    logout: '[auth] Logout',\r\n}"],"names":["useTheme","body","document","getElementById","storagedTheme","localStorage","getItem","theme","setTheme","useState","dataset","handleTheme","navbar","setItem","AuthContext","createContext","authReducer","state","arguments","length","undefined","action","type","types","login","payload","logged","logout","AppRouter","lazy","init","JSON","parse","App","_ref","Logo","user","dispatch","useReducer","useEffect","stringify","_jsx","Provider","value","children"],"sourceRoot":""}