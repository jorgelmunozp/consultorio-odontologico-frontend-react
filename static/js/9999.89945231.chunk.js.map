{"version":3,"file":"static/js/9999.89945231.chunk.js","mappings":"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","sources":["helpers/getDate.js","helpers/getData.js","hooks/useFetch.js","helpers/getTime.js","components/selectors/getCitasFiltered.js","hooks/crud/useCita.js","hooks/crud/usePaciente.js","components/selectors/getPacientesFiltered.js","hooks/crud/useDoctor.js","components/selectors/getDoctoresFiltered.js","hooks/crud/useEspecialidad.js","components/selectors/getEspecialidadesFiltered.js","hooks/crud/useConsultorio.js","components/selectors/getConsultoriosFiltered.js","hooks/crud/useTratamiento.js","components/selectors/getTratamientosFiltered.js","hooks/useCrudFactory.js"],"sourcesContent":["const date = new Date();\r\n\r\nexport const getDate = date\r\n  .toLocaleDateString(\"es-CO\", {\r\n    formatMatcher: \"basic\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  })\r\n  .split(\"/\");","export const getData = async( urlApi ) => {\r\n    let responseFetch = { data: {}, status: 0 };\r\n    await fetch( urlApi )\r\n        .then(response => { responseFetch.status = response.status; return response.json() })\r\n        .then(data => responseFetch.data = data)\r\n        .catch((error) =>{\r\n            if(error.message === 'Failed to fetch') { responseFetch.status = 500 }\r\n        });\r\n    \r\n    return responseFetch;\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nimport { getData } from '../helpers/getData.js';\r\n\r\nexport const useFetch = ( urlApi ) => {\r\n    const [responseFetch, setResponseFetch] = useState({ data: [], status: 0 });\r\n    useEffect( () => { \r\n        getData( urlApi )\r\n            .then( datos => setResponseFetch({ data: datos.data, status: datos.status }) ) \r\n            .catch((error) => console.log(\"Error useFetch: \" + error.message));\r\n    }, []);\r\n\r\n    return responseFetch;\r\n}","const hours = new Date();\r\n\r\nexport const getTime = hours.toLocaleString(\"en-US\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: false,\r\n});","export const getCitasFiltered = ({ array=[],code='',patient='',date='',time='',consultoryRoom='',doctor='',treatment='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.cita.paciente.toLowerCase().includes(patient.toLowerCase()) && item.cita.fecha.toLowerCase().includes(date.toLowerCase()) && item.cita.hora.toLowerCase().includes(time.toLowerCase()) && item.cita.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase())  && item.cita.doctor.toLowerCase().includes(doctor.toLowerCase()) && item.cita.tratamiento.toLowerCase().includes(treatment.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getDate } from '../../helpers/getDate.js';\r\nimport { getTime } from '../../helpers/getTime.js';\r\nimport { getCitasFiltered } from '../../components/selectors/getCitasFiltered.js';\r\n\r\nconst urlApi = process.env.REACT_APP_API_CITAS;\r\n\r\nexport const useCita = ({ initialValues={ paciente:'', consultorio:'', doctor:'', tratamiento:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // 👇 State ---\r\n  const [paciente, setPaciente] = useState(initialValues.paciente || '');\r\n  const [fecha, setFecha] = useState(getDate[2] + \"-\" + getDate[1] + \"-\" + getDate[0]);\r\n  const [hora, setHora] = useState(getTime);\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n  const [tratamiento, setTratamiento] = useState(initialValues.tratamiento || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setPaciente('');\r\n    setFecha(getDate[2] + \"-\" + getDate[1] + \"-\" + getDate[0]);\r\n    setHora(getTime);\r\n    setConsultorio('');\r\n    setDoctor('');\r\n    setTratamiento('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'paciente', value:paciente, type:\"dropdown\", handleChange:(value) => setPaciente(value), placeholder:'Paciente' },\r\n    { key:'fecha', value:fecha, type:\"date\", handleChange:(value) => setFecha(value), placeholder:'Fecha' },\r\n    { key:'hora', value:hora, type:\"time\", handleChange:(value) => setHora(value), placeholder:'Hora' },\r\n    { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange:(value) => setConsultorio(value), placeholder:'Consultorio' },\r\n    { key:'doctor', value:doctor, type:\"dropdown\", handleChange:(value) => setDoctor(value), placeholder:'Doctor' },\r\n    { key:'tratamiento', value:tratamiento, type:\"dropdown\", handleChange:(value) => setTratamiento(value), placeholder:'Tratamiento' }\r\n  ], [paciente, fecha, hora, consultorio, doctor, tratamiento]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { paciente:'', fecha:'', hora:'', consultorio:'', doctor:'', tratamiento:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type: \"error\", title: \"Error en la conexión con la base de datos\", buttons: 1 });\r\n    }\r\n  }, [arrayFetch.status, alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment] = queries;\r\n  \r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getCitasFiltered({ array, code: queryCode, patient: queryPatient, date: queryDate, time: queryTime, consultoryRoom: queryConsultoryRoom, doctor: queryDoctor, treatment: queryTreatment }) );\r\n  }, [array, queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment]);\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- Sort ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.cita[config.key];\r\n    const valueB = b.cita[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\n\r\nexport default useCita;","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getPacientesFiltered } from \"../../components/selectors/getPacientesFiltered.js\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_PACIENTES;\r\n\r\nexport const usePaciente = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', eps:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [eps, setEps] = useState(initialValues.eps || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setNombre('');\r\n    setApellido('');\r\n    setIdentificacion('');\r\n    setGenero('');\r\n    setEps('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:\"nombre\", value:nombre, type:\"search\", handleChange:(value) => setNombre(value), placeholder:'Nombre' },\r\n    { key:\"apellido\", value:apellido, type:\"search\", handleChange:(value) => setApellido(value), placeholder:'Apellido' },\r\n    { key:\"identificacion\", value:identificacion, type:\"number\", handleChange:(value) => setIdentificacion(value), placeholder:'Identificación' },\r\n    { key:\"genero\", value:genero, type:\"dropdown\", handleChange:(value) => setGenero(value), placeholder:'Género' },\r\n    { key:\"eps\", value:eps, type:\"dropdown\", handleChange:(value) => setEps(value), placeholder:'Eps' },\r\n  ], [nombre, apellido, identificacion, genero, eps]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', eps:'' }\r\n  \r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryName, queryLastname, queryIdentification, queryGender, queryEps] = queries;\r\n  \r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getPacientesFiltered({ array, code:queryCode, name:queryName, lastname:queryLastname, identification:queryIdentification, gender:queryGender, eps:queryEps }) );\r\n  }, [array, queryCode, queryName, queryLastname, queryIdentification, queryGender, queryEps]);\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n  \r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.paciente[config.key];\r\n    const valueB = b.paciente[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default usePaciente;","export const getPacientesFiltered = ({ array=[],code='',name='',lastname='',identification='',gender='',eps='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.paciente.nombre.toLowerCase().includes(name.toLowerCase()) && item.paciente.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.paciente.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.paciente.genero.toLowerCase().includes(gender.toLowerCase()) && item.paciente.eps.toLowerCase().includes(eps.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getDoctoresFiltered } from \"../../components/selectors/getDoctoresFiltered.js\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_DOCTORES;\r\n\r\nexport const useDoctor = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setNombre('');\r\n    setApellido('');\r\n    setIdentificacion('');\r\n    setGenero('');\r\n    setEspecialidad('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:\"nombre\", value:nombre, type:\"search\", handleChange:(value) => setNombre(value), placeholder:'Nombre' },\r\n    { key:\"apellido\", value:apellido, type:\"search\", handleChange:(value) => setApellido(value), placeholder:'Apellido' },\r\n    { key:\"identificacion\", value:identificacion, type:\"number\", handleChange:(value) => setIdentificacion(value) , placeholder:'Identificación'},\r\n    { key:\"genero\", value:genero, type:\"dropdown\", handleChange:(value) => setGenero(value), placeholder:'Género' },\r\n    { key:\"especialidad\", value:especialidad, type:\"dropdown\", handleChange:(value) => setEspecialidad(value), placeholder:'Especialidad' },\r\n  ], [nombre, apellido, identificacion, genero, especialidad]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' }\r\n\r\n   // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryName, queryLastname, queryIdentification, queryGender, querySpeciality] = queries;\r\n  \r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getDoctoresFiltered({ array, code:queryCode, name:queryName, lastname:queryLastname, identification:queryIdentification, gender:queryGender, speciality:querySpeciality }) );\r\n  }, [array, queryCode, queryName, queryLastname, queryIdentification, queryGender, querySpeciality]);\r\n\r\n  // pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.doctor[config.key];\r\n    const valueB = b.doctor[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useDoctor;","export const getDoctoresFiltered = ({ array=[],code='',name='',lastname='',identification='',gender='',speciality='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.doctor.nombre.toLowerCase().includes(name.toLowerCase()) && item.doctor.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.doctor.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.doctor.genero.toLowerCase().includes(gender.toLowerCase()) && item.doctor.especialidad.toLowerCase().includes(speciality.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getEspecialidadesFiltered } from '../../components/selectors/getEspecialidadesFiltered.js';\r\n\r\nconst urlApi = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport const useEspecialidad = ({ initialValues={ nombre:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setNombre('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'nombre', value:nombre, type:'search', handleChange:(value) => setNombre(value), placeholder:'Nombre' }\r\n  ], [nombre]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\"]);\r\n  const [queryCode, queryName] = queries;\r\n\r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getEspecialidadesFiltered({ array, code:queryCode, name:queryName }) );\r\n  }, [array, queryCode, queryName]);\r\n  \r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.especialidad[config.key];\r\n    const valueB = b.especialidad[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n  \r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useEspecialidad;","export const getEspecialidadesFiltered = ({ array=[],code='',name='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.especialidad.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getConsultoriosFiltered } from '../../components/selectors/getConsultoriosFiltered.js';\r\n\r\nconst urlApi = process.env.REACT_APP_API_CONSULTORIOS;\r\n\r\nexport const useConsultorio = ({ initialValues={ numero:'', nombre:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [numero, setNumero] = useState(initialValues.numero || '');\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setNumero('');\r\n    setNombre('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'numero', value:numero, type:'number', handleChange:(value) => setNumero(value), placeholder:'Número' },\r\n    { key:'nombre', value:nombre, type:'search', handleChange:(value) => setNombre(value), placeholder:'Nombre' }\r\n  ], [numero, nombre]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { numero:'', nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\"]);\r\n  const [queryCode, queryNumber, queryName] = queries;\r\n  \r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getConsultoriosFiltered({ array, code:queryCode, number:queryNumber, name:queryName }) );\r\n  }, [array, queryCode, queryNumber, queryName]);\r\n  \r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.consultorio[config.key];\r\n    const valueB = b.consultorio[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useConsultorio;","export const getConsultoriosFiltered = ({ array=[],code='',number='',name='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.consultorio.numero.toString().includes(number) && item.consultorio.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getTratamientosFiltered } from '../../components/selectors/getTratamientosFiltered.js';\r\n\r\nconst urlApi = process.env.REACT_APP_API_TRATAMIENTOS;\r\n\r\nexport const useTratamiento = ({ initialValues={ especialidad:'', consultorio:'', doctor:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n\r\n  // Reset state encapsulado\r\n  const resetState = useCallback(() => {\r\n    setEspecialidad('');\r\n    setConsultorio('');\r\n    setDoctor('');\r\n  }, []);\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'especialidad', value:especialidad, type:\"dropdown\", handleChange:(value) => setEspecialidad(value), placeholder:'Especialidad' },\r\n    { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange:(value) => setConsultorio(value), placeholder:'Consultorio' },\r\n    { key:'doctor', value:doctor, type:\"dropdown\", handleChange:(value) => setDoctor(value), placeholder:'Doctor' },\r\n  ], [especialidad, consultorio, doctor]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { especialidad:'', consultorio:'', doctor:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [queryCode, querySpecialty, queryConsultoryRoom, queryDoctor] = queries;\r\n\r\n  const [arrayFiltered, setArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    setArrayFiltered( getTratamientosFiltered({array, code:queryCode, specialty:querySpecialty, consultoryRoom:queryConsultoryRoom, doctor:queryDoctor }) );\r\n  }, [array, queryCode, querySpecialty, queryConsultoryRoom, queryDoctor]);\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.tratamiento[config.key];\r\n    const valueB = b.tratamiento[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    resetState,\r\n    data:{ queries, setQueries, arrayFiltered, setArrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useTratamiento;","export const getTratamientosFiltered = ({ array=[],code='',specialty='',consultoryRoom='',doctor='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.tratamiento.especialidad.toLowerCase().includes(specialty.toLowerCase()) && item.tratamiento.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase()) && item.tratamiento.doctor.toLowerCase().includes(doctor.toLowerCase()) );\r\n}","import { useCita } from './crud/useCita.js';\r\nimport { usePaciente } from './crud/usePaciente.js';\r\nimport { useDoctor } from './crud/useDoctor.js';\r\nimport { useEspecialidad } from './crud/useEspecialidad.js';\r\nimport { useConsultorio } from './crud/useConsultorio.js';\r\nimport { useTratamiento } from './crud/useTratamiento.js';\r\n\r\nexport const useCrudFactory = ({ classType, initialValues={} }) => {\r\n  const hookCita = useCita({ initialValues:initialValues });\r\n  const hookPaciente = usePaciente({ initialValues:initialValues });\r\n  const hookDoctor = useDoctor({ initialValues:initialValues });\r\n  const hookConsultorio = useConsultorio({ initialValues:initialValues });\r\n  const hookTratamiento = useTratamiento({ initialValues:initialValues });\r\n  const hookEspecialidad = useEspecialidad({ initialValues:initialValues });\r\n\r\n  switch (classType) {\r\n    case 'cita': return hookCita;\r\n    case 'paciente': return hookPaciente;\r\n    case 'doctor': return hookDoctor;\r\n    case 'consultorio': return hookConsultorio;\r\n    case 'tratamiento': return hookTratamiento;\r\n    case 'especialidad': return hookEspecialidad;\r\n    default: throw new Error(`Hook no definido para classType: ${classType}`);\r\n  }\r\n}\r\nexport default useCrudFactory;"],"names":["getDate","Date","toLocaleDateString","formatMatcher","year","month","day","split","useFetch","urlApi","responseFetch","setResponseFetch","useState","data","status","useEffect","async","fetch","then","response","json","catch","error","message","getData","datos","console","log","getTime","toLocaleString","hour","minute","hour12","process","useCita","_ref","initialValues","paciente","consultorio","doctor","tratamiento","alert","useAlertContext","setPaciente","fecha","setFecha","hora","setHora","setConsultorio","setDoctor","setTratamiento","resetState","useCallback","state","useMemo","key","value","type","handleChange","placeholder","keys","map","_ref2","placeholders","k","arrayFetch","title","buttons","array","queries","setQueries","queryCode","queryPatient","queryDate","queryTime","queryConsultoryRoom","queryDoctor","queryTreatment","arrayFiltered","setArrayFiltered","code","patient","date","time","consultoryRoom","treatment","filter","item","_id","toString","includes","cita","toLowerCase","getCitasFiltered","itemsPerPage","setItemsPerPage","indexPage","setIndexPage","totalPages","Math","ceil","length","indexPages","Array","from","_","i","activePages","setActivePages","fill","sortBy","setSortBy","sortConfig","_ref3","flatMap","field","order","SortByProperty","a","b","config","valueA","valueB","localeCompare","api","dataObject","sort","usePaciente","nombre","apellido","identificacion","genero","eps","setNombre","setApellido","setIdentificacion","setGenero","setEps","queryName","queryLastname","queryIdentification","queryGender","queryEps","name","lastname","identification","gender","getPacientesFiltered","useDoctor","especialidad","setEspecialidad","querySpeciality","speciality","getDoctoresFiltered","useEspecialidad","getEspecialidadesFiltered","useConsultorio","numero","setNumero","queryNumber","number","getConsultoriosFiltered","useTratamiento","querySpecialty","specialty","getTratamientosFiltered","useCrudFactory","classType","hookCita","hookPaciente","hookDoctor","hookConsultorio","hookTratamiento","hookEspecialidad","Error"],"sourceRoot":""}