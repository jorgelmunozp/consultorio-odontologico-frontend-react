{"version":3,"file":"static/js/9999.554e4d69.chunk.js","mappings":"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","sources":["helpers/getDate.js","../node_modules/jwt-decode/build/esm/index.js","helpers/getData.js","hooks/useFetch.js","helpers/getTime.js","hooks/crud/useCita.js","components/selectors/getCitasFiltered.js","hooks/crud/usePaciente.js","components/selectors/getPacientesFiltered.js","hooks/crud/useDoctor.js","components/selectors/getDoctoresFiltered.js","hooks/crud/useEspecialidad.js","components/selectors/getEspecialidadesFiltered.js","hooks/crud/useConsultorio.js","components/selectors/getConsultoriosFiltered.js","hooks/crud/useTratamiento.js","components/selectors/getTratamientosFiltered.js","hooks/useCrudFactory.js"],"sourcesContent":["const date = new Date();\r\n\r\nexport const getDate = date\r\n  .toLocaleDateString(\"es-CO\", {\r\n    formatMatcher: \"basic\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  })\r\n  .split(\"/\");","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","export const getData = async( urlApi ) => {\r\n    let responseFetch = { data: {}, status: 0 };\r\n    await fetch( urlApi )\r\n        .then(response => { responseFetch.status = response.status; return response.json() })\r\n        .then(data => responseFetch.data = data)\r\n        .catch((error) =>{\r\n            if(error.message === 'Failed to fetch') { responseFetch.status = 500 }\r\n        });\r\n    \r\n    return responseFetch;\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nimport { getData } from '../helpers/getData.js';\r\n\r\nexport const useFetch = ( urlApi ) => {\r\n    const [responseFetch, setResponseFetch] = useState({ data: [], status: 0 });\r\n    useEffect( () => { \r\n        getData( urlApi )\r\n            .then( datos => setResponseFetch({ data: datos.data, status: datos.status }) ) \r\n            .catch((error) => console.log(\"Error useFetch: \" + error.message));\r\n    }, []);\r\n\r\n    return responseFetch;\r\n}","const hours = new Date();\r\n\r\nexport const getTime = hours.toLocaleString(\"en-US\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: false,\r\n});","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getDate } from '../../helpers/getDate.js';\r\nimport { getTime } from '../../helpers/getTime.js';\r\nimport { getCitasFiltered } from '../../components/selectors/getCitasFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_CITAS;\r\n\r\nexport const useCita = ({ initialValues={ paciente:'', consultorio:'', doctor:'', tratamiento:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // --- State ---\r\n  const [paciente, setPaciente] = useState(initialValues.paciente || '');\r\n  const [fecha, setFecha] = useState(getDate[2] + \"-\" + getDate[1] + \"-\" + getDate[0]);\r\n  const [hora, setHora] = useState(getTime);\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n  const [tratamiento, setTratamiento] = useState(initialValues.tratamiento || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'paciente', value:paciente, type:\"dropdown\", handleChange:(value) => setPaciente(decode(value)), placeholder:'Paciente' },\r\n    { key:'fecha', value:fecha, type:\"date\", handleChange:(value) => setFecha(decode(value)), placeholder:'Fecha' },\r\n    { key:'hora', value:hora, type:\"time\", handleChange:(value) => setHora(decode(value)), placeholder:'Hora' },\r\n    { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange:(value) => setConsultorio(decode(value)), placeholder:'Consultorio' },\r\n    { key:'doctor', value:doctor, type:\"dropdown\", handleChange:(value) => setDoctor(decode(value)), placeholder:'Doctor' },\r\n    { key:'tratamiento', value:tratamiento, type:\"dropdown\", handleChange:(value) => setTratamiento(decode(value)), placeholder:'Tratamiento' }\r\n  ], [paciente, fecha, hora, consultorio, doctor, tratamiento]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { paciente:'', fecha:'', hora:'', consultorio:'', doctor:'', tratamiento:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type: \"error\", title: \"Error en la conexión con la base de datos\", buttons: 1 });\r\n    }\r\n  }, [arrayFetch.status, alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment] = queries;\r\n  \r\n  const arrayFiltered = useMemo(() => getCitasFiltered({ array, code:queryCode, patient:queryPatient, date:queryDate, time:queryTime, consultoryRoom:queryConsultoryRoom, doctor:queryDoctor, treatment:queryTreatment }), [array, queryCode, queryPatient, queryDate, queryTime, queryConsultoryRoom, queryDoctor, queryTreatment] );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- Sort ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.cita[config.key];\r\n    const valueB = b.cita[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\n\r\nexport default useCita;","export const getCitasFiltered = ({ array=[],code='',patient='',date='',time='',consultoryRoom='',doctor='',treatment='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.cita.paciente.toLowerCase().includes(patient.toLowerCase()) && item.cita.fecha.toLowerCase().includes(date.toLowerCase()) && item.cita.hora.toLowerCase().includes(time.toLowerCase()) && item.cita.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase())  && item.cita.doctor.toLowerCase().includes(doctor.toLowerCase()) && item.cita.tratamiento.toLowerCase().includes(treatment.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getPacientesFiltered } from \"../../components/selectors/getPacientesFiltered.js\";\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_PACIENTES;\r\n\r\nexport const usePaciente = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', eps:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [eps, setEps] = useState(initialValues.eps || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:\"nombre\", value:nombre, type:\"search\", handleChange:(v) => setNombre(decode(v)), placeholder:'Nombre' },\r\n    { key:\"apellido\", value:apellido, type:\"search\", handleChange:(v) => setApellido(decode(v)), placeholder:'Apellido' },\r\n    { key:\"identificacion\", value:identificacion, type:\"number\", handleChange:(v) => setIdentificacion(decode(v)), placeholder:'Identificación' },\r\n    { key:\"genero\", value:genero, type:\"dropdown\", handleChange:(v) => setGenero(decode(v)), placeholder:'Género' },\r\n    { key:\"eps\", value:eps, type:\"dropdown\", handleChange:(v) => setEps(decode(v)), placeholder:'Eps' },\r\n  ], [nombre, apellido, identificacion, genero, eps]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', eps:'' }\r\n  \r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryName, queryLastname, queryIdentification, queryGender, queryEps] = queries;\r\n  \r\n  const arrayFiltered = useMemo(() => getPacientesFiltered({ array, code:queryCode, name:queryName, lastname:queryLastname, identification:queryIdentification, gender:queryGender, eps:queryEps }), [array, queryCode, queryName, queryLastname, queryIdentification, queryGender, queryEps] );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n  \r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.paciente[config.key];\r\n    const valueB = b.paciente[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default usePaciente;","export const getPacientesFiltered = ({ array=[],code='',name='',lastname='',identification='',gender='',eps='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.paciente.nombre.toLowerCase().includes(name.toLowerCase()) && item.paciente.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.paciente.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.paciente.genero.toLowerCase().includes(gender.toLowerCase()) && item.paciente.eps.toLowerCase().includes(eps.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from \"../useFetch.js\";\r\nimport { getDoctoresFiltered } from \"../../components/selectors/getDoctoresFiltered.js\";\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_DOCTORES;\r\n\r\nexport const useDoctor = ({ initialValues={ nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n  \r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n  const [apellido, setApellido] = useState(initialValues.apellido || '');\r\n  const [identificacion, setIdentificacion] = useState(initialValues.identificacion || '');\r\n  const [genero, setGenero] = useState(initialValues.genero || '');\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:\"nombre\", value:nombre, type:\"search\", handleChange:(v) => setNombre(decode(v)), placeholder:'Nombre' },\r\n    { key:\"apellido\", value:apellido, type:\"search\", handleChange:(v) => setApellido(decode(v)), placeholder:'Apellido' },\r\n    { key:\"identificacion\", value:identificacion, type:\"number\", handleChange:(v) => setIdentificacion(decode(v)) , placeholder:'Identificación'},\r\n    { key:\"genero\", value:genero, type:\"dropdown\", handleChange:(v) => setGenero(decode(v)), placeholder:'Género' },\r\n    { key:\"especialidad\", value:especialidad, type:\"dropdown\", handleChange:(v) => setEspecialidad(decode(v)), placeholder:'Especialidad' },\r\n  ], [nombre, apellido, identificacion, genero, especialidad]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'', apellido:'', identificacion:'', genero:'', especialidad:'' }\r\n\r\n   // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const [queryCode, queryName, queryLastname, queryIdentification, queryGender, querySpeciality] = queries;\r\n  \r\n  const arrayFiltered = useMemo( () => getDoctoresFiltered({ array, code:queryCode, name:queryName, lastname:queryLastname, identification:queryIdentification, gender:queryGender, speciality:querySpeciality }), [array, queryCode, queryName, queryLastname, queryIdentification, queryGender, querySpeciality] );\r\n\r\n  // pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.doctor[config.key];\r\n    const valueB = b.doctor[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useDoctor;","export const getDoctoresFiltered = ({ array=[],code='',name='',lastname='',identification='',gender='',speciality='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.doctor.nombre.toLowerCase().includes(name.toLowerCase()) && item.doctor.apellido.toLowerCase().includes(lastname.toLowerCase()) && item.doctor.identificacion.toLowerCase().includes(identification.toLowerCase()) && item.doctor.genero.toLowerCase().includes(gender.toLowerCase()) && item.doctor.especialidad.toLowerCase().includes(speciality.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getEspecialidadesFiltered } from '../../components/selectors/getEspecialidadesFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_ESPECIALIDADES;\r\n\r\nexport const useEspecialidad = ({ initialValues={ nombre:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'nombre', value:nombre, type:'search', handleChange:(value) => setNombre(decode(value)), placeholder:'Nombre' }\r\n  ], [nombre]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\"]);\r\n  const [queryCode, queryName] = queries;\r\n\r\n  const arrayFiltered = useMemo(() => getEspecialidadesFiltered({ array, code:queryCode, name:queryName }), [array, queryCode, queryName] );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.especialidad[config.key];\r\n    const valueB = b.especialidad[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n  \r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useEspecialidad;","export const getEspecialidadesFiltered = ({ array=[],code='',name='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.especialidad.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getConsultoriosFiltered } from '../../components/selectors/getConsultoriosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_CONSULTORIOS;\r\n\r\nexport const useConsultorio = ({ initialValues={ numero:'', nombre:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [numero, setNumero] = useState(initialValues.numero || '');\r\n  const [nombre, setNombre] = useState(initialValues.nombre || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'numero', value:numero, type:'number', handleChange:(value) => setNumero(decode(value)), placeholder:'Número' },\r\n    { key:'nombre', value:nombre, type:'search', handleChange:(value) => setNombre(decode(value)), placeholder:'Nombre' }\r\n  ], [numero, nombre]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { numero:'', nombre:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\"]);\r\n  const [queryCode, queryNumber, queryName] = queries;\r\n  \r\n  const arrayFiltered = useMemo(() => getConsultoriosFiltered({ array, code:queryCode, number:queryNumber, name:queryName }), [array, queryCode, queryNumber, queryName] );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, 10]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.consultorio[config.key];\r\n    const valueB = b.consultorio[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy }\r\n  };\r\n}\r\nexport default useConsultorio;","export const getConsultoriosFiltered = ({ array=[],code='',number='',name='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.consultorio.numero.toString().includes(number) && item.consultorio.nombre.toLowerCase().includes(name.toLowerCase()) );\r\n}","import { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useFetch } from '../useFetch.js';\r\nimport { getTratamientosFiltered } from '../../components/selectors/getTratamientosFiltered.js';\r\nimport { jwtDecode as decode } from \"jwt-decode\";\r\n\r\nconst urlApi = process.env.REACT_APP_API_TRATAMIENTOS;\r\n\r\nexport const useTratamiento = ({ initialValues={ especialidad:'', consultorio:'', doctor:'' } }) => {\r\n  const { alert } = useAlertContext();\r\n\r\n  // --- State ---\r\n  const [especialidad, setEspecialidad] = useState(initialValues.especialidad || '');\r\n  const [consultorio, setConsultorio] = useState(initialValues.consultorio || '');\r\n  const [doctor, setDoctor] = useState(initialValues.doctor || '');\r\n\r\n  // State unificado para inputs\r\n  const state = useMemo(() => [\r\n    { key:'especialidad', value:especialidad, type:\"dropdown\", handleChange:(value) => setEspecialidad(decode(value)), placeholder:'Especialidad' },\r\n    { key:'consultorio', value:consultorio, type:\"dropdown\", handleChange:(value) => setConsultorio(decode(value)), placeholder:'Consultorio' },\r\n    { key:'doctor', value:doctor, type:\"dropdown\", handleChange:(value) => setDoctor(decode(value)), placeholder:'Doctor' },\r\n  ], [especialidad, consultorio, doctor]);\r\n\r\n  // --- Object ---\r\n  const dataObject = { especialidad:'', consultorio:'', doctor:'' }\r\n\r\n  // --- Titles ---\r\n  const keys = useMemo(() => state.map(({ placeholder, type }) => ({ key: placeholder, type })), [state]);\r\n  const placeholders = useMemo(() => keys.map((k) => k.key), [keys]);\r\n\r\n  // 👇 Data (fetch + queries + pagination) ---\r\n  // Fetch de datos\r\n  const arrayFetch = useFetch(urlApi);\r\n  useEffect(() => {\r\n    if (arrayFetch.status >= 400) {\r\n      alert({ type:'error', title:'Error en la conexión con la base de datos', buttons:1 });\r\n    }\r\n  }, [arrayFetch,alert]);\r\n\r\n  const array = useMemo(() => arrayFetch.data || [], [arrayFetch.data]);\r\n\r\n  // Queries unificadas\r\n  const [queries, setQueries] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [queryCode, querySpecialty, queryConsultoryRoom, queryDoctor] = queries;\r\n\r\n  const arrayFiltered = useMemo(() => getTratamientosFiltered({array, code:queryCode, specialty:querySpecialty, consultoryRoom:queryConsultoryRoom, doctor:queryDoctor }), [array, queryCode, querySpecialty, queryConsultoryRoom, queryDoctor] );\r\n\r\n  // Pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [indexPage, setIndexPage] = useState([0, itemsPerPage]);\r\n\r\n  const totalPages = Math.ceil(arrayFiltered.length / itemsPerPage);\r\n  const indexPages = useMemo( () => Array.from({ length: totalPages }, (_, i) => i), [totalPages] );\r\n  const [activePages, setActivePages] = useState(() => Array(totalPages).fill(false).map((_, i) => i === 0) );    // 👈 Estado inicial: primera página activa\r\n  useEffect(() => { setActivePages(Array(totalPages).fill(false).map((_, i) => i === 0)); }, [totalPages]);       // 👈 Recalcula al cambiar el número de páginas\r\n\r\n  // --- SORT ---\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const sortConfig = useMemo(() => {                // 👈 Genera la configuración de ordenamiento\r\n    const fields =  state.map(({ key }) => key);\r\n    return fields.flatMap(field => [{ key: field, order: \"asc\" }, { key: field, order: \"desc\" }]); \r\n  }, []);\r\n\r\n  const SortByProperty = useCallback((a, b) => {    // 👈 Función memorizada de comparación en base a sortBy\r\n    const config = sortConfig[sortBy - 1];          // 👈 -1 porque sortBy empieza en 1\r\n    if (!config) return 0;\r\n\r\n    const valueA = a.tratamiento[config.key];\r\n    const valueB = b.tratamiento[config.key];\r\n\r\n    return config.order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA); \r\n  }, [sortBy, sortConfig]);\r\n\r\n  /** ---------- RETURN ---------- */\r\n  return {\r\n    api:urlApi,\r\n    dataObject,\r\n    keys,\r\n    placeholders,\r\n    state,\r\n    data:{ queries, setQueries, arrayFiltered, indexPage, itemsPerPage, activePages, indexPages, setIndexPage, setActivePages },\r\n    sort:{ SortByProperty, setSortBy },\r\n  };\r\n};\r\nexport default useTratamiento;","export const getTratamientosFiltered = ({ array=[],code='',specialty='',consultoryRoom='',doctor='' }) => {\r\n    return array.filter( item => item._id.toString().includes(code) && item.tratamiento.especialidad.toLowerCase().includes(specialty.toLowerCase()) && item.tratamiento.consultorio.toLowerCase().includes(consultoryRoom.toLowerCase()) && item.tratamiento.doctor.toLowerCase().includes(doctor.toLowerCase()) );\r\n}","import { useCita } from './crud/useCita.js';\r\nimport { usePaciente } from './crud/usePaciente.js';\r\nimport { useDoctor } from './crud/useDoctor.js';\r\nimport { useEspecialidad } from './crud/useEspecialidad.js';\r\nimport { useConsultorio } from './crud/useConsultorio.js';\r\nimport { useTratamiento } from './crud/useTratamiento.js';\r\n\r\nexport const useCrudFactory = ({ classType, initialValues={} }) => {\r\n  const hookCita = useCita({ initialValues:initialValues });\r\n  const hookPaciente = usePaciente({ initialValues:initialValues });\r\n  const hookDoctor = useDoctor({ initialValues:initialValues });\r\n  const hookConsultorio = useConsultorio({ initialValues:initialValues });\r\n  const hookTratamiento = useTratamiento({ initialValues:initialValues });\r\n  const hookEspecialidad = useEspecialidad({ initialValues:initialValues });\r\n\r\n  switch (classType) {\r\n    case 'cita': return hookCita;\r\n    case 'paciente': return hookPaciente;\r\n    case 'doctor': return hookDoctor;\r\n    case 'consultorio': return hookConsultorio;\r\n    case 'tratamiento': return hookTratamiento;\r\n    case 'especialidad': return hookEspecialidad;\r\n    default: throw new Error(`Hook no definido para classType: ${classType}`);\r\n  }\r\n}\r\nexport default useCrudFactory;"],"names":["getDate","Date","toLocaleDateString","formatMatcher","year","month","day","split","InvalidTokenError","Error","base64UrlDecode","str","output","replace","length","decodeURIComponent","atob","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","jwtDecode","token","options","pos","header","part","decoded","e","message","JSON","parse","prototype","name","useFetch","urlApi","responseFetch","setResponseFetch","useState","data","status","useEffect","async","fetch","then","response","json","catch","error","getData","datos","console","log","getTime","toLocaleString","hour","minute","hour12","process","useCita","_ref","initialValues","paciente","consultorio","doctor","tratamiento","alert","useAlertContext","setPaciente","fecha","setFecha","hora","setHora","setConsultorio","setDoctor","setTratamiento","state","useMemo","key","value","type","handleChange","decode","placeholder","keys","map","_ref2","placeholders","k","arrayFetch","title","buttons","array","queries","setQueries","queryCode","queryPatient","queryDate","queryTime","queryConsultoryRoom","queryDoctor","queryTreatment","arrayFiltered","patient","date","time","consultoryRoom","treatment","filter","item","_id","includes","cita","toLowerCase","getCitasFiltered","itemsPerPage","setItemsPerPage","indexPage","setIndexPage","totalPages","Math","ceil","indexPages","Array","from","_","i","activePages","setActivePages","fill","sortBy","setSortBy","sortConfig","_ref3","flatMap","field","order","SortByProperty","useCallback","a","b","config","valueA","valueB","localeCompare","api","dataObject","sort","usePaciente","nombre","apellido","identificacion","genero","eps","setNombre","setApellido","setIdentificacion","setGenero","setEps","v","queryName","queryLastname","queryIdentification","queryGender","queryEps","lastname","identification","gender","getPacientesFiltered","useDoctor","especialidad","setEspecialidad","querySpeciality","speciality","getDoctoresFiltered","useEspecialidad","getEspecialidadesFiltered","useConsultorio","numero","setNumero","queryNumber","number","getConsultoriosFiltered","useTratamiento","querySpecialty","specialty","getTratamientosFiltered","useCrudFactory","classType","hookCita","hookPaciente","hookDoctor","hookConsultorio","hookTratamiento","hookEspecialidad"],"sourceRoot":""}