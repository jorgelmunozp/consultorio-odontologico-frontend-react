{"version":3,"file":"static/js/7654.356e55d0.chunk.js","mappings":"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","sources":["components/crud/UpdateItem.js","helpers/fetchUpdate.js"],"sourcesContent":["import '../../alerts/modal/modal.css';\r\nimport { lazy, memo, useState,useCallback, useMemo }  from \"react\";\r\nimport { useThemeContext } from \"../../theme/ThemeContext.js\";\r\nimport { useCrudFactory } from '../../hooks/useCrudFactory.js';\r\nimport { useAlertContext } from '../../alerts/AlertContext.js';\r\nimport { fetchUpdate } from '../../helpers/fetchUpdate.js';\r\nimport { myColor } from '../../global.js';\r\n\r\nconst Input = lazy(() => import('../forms/inputs/Input.js'));\r\nconst Dropdown = lazy(() => import('../forms/dropdown/Dropdown.js'));\r\n\r\nexport const UpdateItem = ({ classType, Icon, item, urlApi, setOpen, handleItems }) => { \r\n  const { theme } = useThemeContext();                            // 👈 Call the global theme\r\n  const { alert } = useAlertContext();\r\n  \r\n  // 👇 Estado para controlar cuál dropdown está abierto mediante la key\r\n  const [openDropdownKey, setOpenDropdownKey] = useState(null);\r\n\r\n  // 👇 Memoriza initialValues para evitar recalcular en cada render\r\n  const initialValues = useMemo(() => {\r\n    switch (classType) {\r\n      case \"cita\": return { paciente:item[classType].paciente, consultorio:item[classType].consultorio, doctor:item[classType].doctor, tratamiento:item[classType].tratamiento, };\r\n      case \"paciente\": return { nombre:item[classType].nombre, apellido:item[classType].apellido, identificacion:item[classType].identificacion, genero:item[classType].genero, eps:item[classType].eps, };\r\n      case \"doctor\": return { nombre:item[classType].nombre, apellido:item[classType].apellido, identificacion:item[classType].identificacion, genero:item[classType].genero, especialidad:item[classType].especialidad, };\r\n      case \"consultorio\": return { numero:item[classType].numero, nombre:item[classType].nombre };\r\n      case \"especialidad\": return { nombre:item[classType].nombre };\r\n      case \"tratamiento\": return { especialidad:item[classType].especialidad, consultorio:item[classType].consultorio, doctor:item[classType].doctor, };\r\n      default: return {};\r\n    }}, [classType, item]);\r\n\r\n  const state = useCrudFactory({ classType:classType, initialValues:initialValues }).state;\r\n\r\n  // 👇 Close view memorized handler\r\n  const handleClose = useCallback(() => setOpen(false), [setOpen]);                            // Gestiona el cierre del modal\r\n\r\n  // 👇 Dropdowns toggle memorized handler\r\n  const handleToggleDropdown = useCallback((key) => setOpenDropdownKey((prev) => (prev === key ? null : key)), []);\r\n\r\n  // 👇 Maneja la actualización del item y llama la API\r\n  const handleUpdate = useCallback(() => {\r\n    if( state.every( property => property.value !== '') ) {                     // Check for emtpy fields to avoid any empty item\r\n      state.forEach((property) => { item[classType][property.key] = property.value });   // Actualiza los nuevos valores en el item\r\n\r\n      const dataItem = JSON.stringify({ [classType]: item[classType] }); \r\n\r\n      fetchUpdate(urlApi,dataItem,item._id).then(                               // Fetch PUT para actualización de datos\r\n        async (responseStatus) => {\r\n            if(200 <= responseStatus && responseStatus <= 299) { \r\n              handleItems('update',item._id);                        // El padre actualiza el estado y React re-renderiza con el elemento actualizado\r\n              \r\n              alert({ type:'success', title:'Actualización exitosa', buttons:1 });\r\n            }\r\n          else { alert({ type:'error', title:'Error en la actualización', buttons:1 }) }\r\n        },\r\n        (error) => { alert({ type:'error', title:'Error en la actualización', buttons:1 }); console.log('Error Update: ', error) }\r\n      )\r\n    }\r\n  }, [state, classType, item, urlApi, handleItems, alert]);\r\n\r\n  // 👇 Memoriza el contenido para evitar re-render innecesario\r\n  const formRows = useMemo(() =>\r\n      state.map((property,index) => (\r\n        <div key={\"row\"+index} className=\"row bg-row flex-nowrap\">\r\n          { property.type === \"dropdown\" ? ( <Dropdown property={property} isOpen={openDropdownKey === property.key} onToggle={() => handleToggleDropdown(property.key)} /> ) \r\n                                         : ( <div className=\"col px-0\"><Input property={true} value={property.value} type={property.type} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className=\"input form-control rounded border-muted border-1 text-center shadow-sm\" /></div> )\r\n          }\r\n        </div>\r\n      )),\r\n    [state, openDropdownKey, handleToggleDropdown]\r\n  );\r\n\r\n  if (process.env.NODE_ENV === 'development') console.log('[Update Item ♻️]');\r\n\r\n  return (\r\n      <>\r\n        <div className={'modalContainer justify-items-center'}>\r\n          <div className={'modalBox'} data-theme={theme}>\r\n            <div className={'modalHeader'}>\r\n              <center><Icon color={myColor} height={2.5} width={2.5} strokeWidth={0.6} className={'center'} /></center>\r\n              <h6 className={'modalTitle century-gothic main-color pt-2'}>{ \"Actualizar \" + classType.charAt(0).toUpperCase() + classType.slice(1) + \"?\" }</h6>\r\n            </div>\r\n            <div className={'modalContent'}>\r\n              <div className='container-fluid modalTable mt-2'>\r\n                <div className='row bg-row flex-nowrap'>\r\n                  <Input placeholder={'Código'} value={item._id} type={'text'} className={'input form-control rounded border-muted border-1 text-center shadow-sm pe-none'} />\r\n                </div>\r\n                { formRows }\r\n              </div>\r\n            </div>\r\n            <div className={'modalFooter'}>\r\n              <div className={'d-flex mt-2 w-100'}>\r\n                <button className={'aceptBtn w-100'} onClick={() => { handleUpdate(); handleClose(); }}>Actualizar</button>\r\n                <button className={'cancelBtn w-100'} onClick={ handleClose }>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={'darkBackground'} onClick={ handleClose }></div>\r\n      </>\r\n    )\r\n};\r\n\r\nexport default memo(UpdateItem);\r\n\r\n\r\n// // 👇 Exporta componente memoizado con comparación personalizada\r\n// export default memo(UpdateItem, (prevProps, nextProps) => {\r\n//   return (\r\n//     prevProps.classType === nextProps.classType &&\r\n//     prevProps.urlApi === nextProps.urlApi &&\r\n//     prevProps.Icon === nextProps.Icon &&\r\n//     prevProps.setOpen === nextProps.setOpen &&\r\n//     prevProps.handleItems === nextProps.handleItems &&\r\n//     JSON.stringify(prevProps.item) === JSON.stringify(nextProps.item) // 👈 comparación profunda de item\r\n//   );\r\n// });","export const fetchUpdate = async ( urlApi,dataApi,id ) => {\r\n  try {\r\n    const response = await fetch(urlApi + \"/\" + id, {\r\n      method: \"PUT\",\r\n      body: dataApi,\r\n      headers: { \"Content-type\": \"application/json\" }\r\n    });\r\n    response.json();\r\n    if (200 <= response.status && response.status <= 299) {\r\n      console.log('PUT ' + response.status + ' Actualización exitosa');\r\n    } else if (400 <= response.status && response.status <= 499) {\r\n      console.log('PUT ' + response.status + ' Actualización fallida: Error en el envío de datos');\r\n    } else if (500 <= response.status && response.status <= 599) {\r\n      console.log('PUT ' + response.status + ' Actualización fallida: Error en el servidor remoto');\r\n    }\r\n    return response.status;\r\n  } catch (error) {\r\n      const errorMessage = error.toString().split(':')[1].trim();\r\n      if (errorMessage === 'Failed to fetch') { console.log('Actualización fallida: No hay conexión con la base de datos') } \r\n      else { console.log('Actualización fallida: ' + errorMessage) }\r\n  }\r\n}"],"names":["Input","lazy","Dropdown","UpdateItem","_ref","classType","Icon","item","urlApi","setOpen","handleItems","theme","useThemeContext","alert","useAlertContext","openDropdownKey","setOpenDropdownKey","useState","initialValues","useMemo","paciente","consultorio","doctor","tratamiento","nombre","apellido","identificacion","genero","eps","especialidad","numero","state","useCrudFactory","handleClose","useCallback","handleToggleDropdown","key","prev","handleUpdate","every","property","value","forEach","dataItem","JSON","stringify","async","dataApi","id","response","fetch","method","body","headers","json","status","console","log","error","errorMessage","toString","split","trim","fetchUpdate","_id","then","responseStatus","type","title","buttons","formRows","map","index","_jsx","className","children","isOpen","onToggle","handleChange","placeholder","charAt","toUpperCase","slice","_jsxs","_Fragment","color","myColor","height","width","strokeWidth","onClick","memo"],"sourceRoot":""}