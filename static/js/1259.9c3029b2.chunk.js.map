{"version":3,"file":"static/js/1259.9c3029b2.chunk.js","mappings":"2PAIA,MAAMA,GAAQC,EAAAA,EAAAA,OAAMC,EAAAA,EAAAA,MAAK,IAAM,iCAElBC,EAAaC,IAA+E,IAA9E,UAAEC,EAAS,KAAEC,EAAI,MAAEC,EAAM,GAAE,QAAEC,EAAO,WAAEC,EAAU,UAACC,EAAU,GAAE,QAAEC,GAASP,EAC/F,MAAM,MAAEQ,IAAUC,EAAAA,EAAAA,MAGZC,GAAuBC,EAAAA,EAAAA,SAAS,IAAMV,EAAUW,OAAO,GAAGC,cAAgBZ,EAAUa,MAAM,GAAI,CAACb,IAG/Fc,GAAeC,EAAAA,EAAAA,aAAY,CAACC,EAAOC,KACrCb,EAAWc,IAAU,MAAMC,EAAa,IAAID,GAEvB,OADAC,EAAWH,GAASC,EACbE,KAE7B,CAACf,IAGEgB,GAAcL,EAAAA,EAAAA,aAAY,IAAMT,GAAQ,GAAQ,CAACA,IAIvD,OACAe,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKnB,UAAW,sCAAsCkB,UACpDF,EAAAA,EAAAA,MAAA,OAAKhB,UAAW,WAAY,aAAYE,EAAMgB,SAAA,EAC5CF,EAAAA,EAAAA,MAAA,OAAKhB,UAAW,cAAckB,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UAAAD,UAAQC,EAAAA,EAAAA,KAACvB,EAAI,CAACwB,MAAOC,EAAAA,GAASC,OAAQ,IAAKC,MAAO,IAAKC,YAAa,GAAKxB,UAAW,cACpFgB,EAAAA,EAAAA,MAAA,MAAIhB,UAAU,4CAA2CkB,SAAA,CAAC,UAAQd,SAErEe,EAAAA,EAAAA,KAAA,OAAKnB,UAAW,eAAekB,UAC7BF,EAAAA,EAAAA,MAAA,OAAKhB,UAAU,kCAAiCkB,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKnB,UAAU,aAAYkB,UAACC,EAAAA,EAAAA,KAAC7B,EAAK,CAACmC,YAAa,YAA0Bb,MAAOd,EAAQ,GAAI4B,KAAM,SAAUjB,aAAekB,GAAWlB,EAAa,EAAGkB,GAAS3B,UAAW,0EAA5G,aACzDH,EAAM+B,IAAI,CAACC,EAAMlB,KACfQ,EAAAA,EAAAA,KAAA,OAAoBnB,UAAU,aAAYkB,UACtCC,EAAAA,EAAAA,KAAA,OAAKnB,UAAU,WAAUkB,UAACC,EAAAA,EAAAA,KAAC7B,EAAK,CAAuBsB,MAAOd,EAAQa,EAAM,GAAIe,KAAoB,aAAdG,EAAKH,KAAsBG,EAAKH,KAAO,SAAWjB,aAAekB,GAAWlB,EAAaE,EAAQ,EAAGgB,GAASF,YAAaI,EAAKC,IAAM9B,UAAW,0EAAhM6B,EAAKH,KAAKf,MAD1CkB,EAAKC,YAM7BX,EAAAA,EAAAA,KAAA,OAAKnB,UAAW,cAAckB,UAC5BF,EAAAA,EAAAA,MAAA,OAAKhB,UAAW,oBAAoBkB,SAAA,EAClCC,EAAAA,EAAAA,KAAA,UAAQnB,UAAW,iBAAkB+B,QAASA,KAAQhB,KAAiBG,SAAC,YACxEC,EAAAA,EAAAA,KAAA,UAAQnB,UAAW,kBAAmB+B,QAAUhB,EAAaG,SAAC,wBAKtEC,EAAAA,EAAAA,KAAA,OAAKnB,UAAW,iBAAkB+B,QAAUhB,QAKlD,GAAexB,EAAAA,EAAAA,MAAKE,E","sources":["components/crud/SearchItem.js"],"sourcesContent":["import { lazy, memo, useCallback, useMemo } from 'react';\r\nimport { useThemeContext } from '../../theme/ThemeContext.js';\r\nimport { myColor } from '../../global.js';\r\n\r\nconst Input = memo( lazy(() => import('../forms/inputs/Input.js')) );\r\n\r\nexport const SearchItem = ({ classType, Icon, items=[], queries, setQueries,className='', setOpen }) => {  \r\n    const { theme } = useThemeContext();       // ðŸ‘ˆ Call the global theme\r\n  \r\n    // Capitaliza el nombre del tipo de clase para mostrar en el tÃ­tulo\r\n    const capitalizedClassType = useMemo( () => classType.charAt(0).toUpperCase() + classType.slice(1), [classType] );\r\n\r\n    // ðŸ‘‡ Manejo memorizado de cambios en un solo array\r\n    const handleChange = useCallback((index, value) => {\r\n        setQueries(prev => { const newQueries = [...prev];\r\n                             newQueries[index] = value;\r\n                             return newQueries;\r\n        });\r\n    }, [setQueries]);\r\n\r\n    // ðŸ‘‡ Close view memorized handler\r\n    const handleClose = useCallback(() => setOpen(false), [setOpen]); \r\n\r\n    if( process.env.NODE_ENV === 'development' ) { console.log('[SearchItem ðŸ”Ž]') }\r\n\r\n    return (\r\n    <>\r\n      <div className={'modalContainer justify-items-center'}>\r\n        <div className={'modalBox'} data-theme={theme}>\r\n          <div className={'modalHeader'}>\r\n             <center><Icon color={myColor} height={2.5} width={2.5} strokeWidth={0.6} className={'center'} /></center>\r\n             <h6 className=\"modalTitle century-gothic main-color pt-2\">Buscar {capitalizedClassType}</h6>\r\n          </div>\r\n          <div className={'modalContent'}>\r\n            <div className='container-fluid modalTable mt-2'>\r\n                <div className='row bg-row'><Input placeholder={'CÃ³digo'} key={'number0'} value={queries[0]} type={'number'} handleChange={(target) => handleChange(0, target)} className={'input form-control rounded border-muted border-1 text-center shadow-sm'} /></div>\r\n                    { items.map((item, index) => \r\n                        <div key={item.key} className='row bg-row'>\r\n                            <div className=\"col px-0\"><Input key={item.type+index} value={queries[index+1]} type={item.type !== 'dropdown' ? item.type : 'search' } handleChange={(target) => handleChange(index + 1, target)} placeholder={item.key } className={'input form-control rounded border-muted border-1 text-center shadow-sm'} /></div>\r\n                        </div> ) \r\n                    }\r\n            </div>\r\n          </div>\r\n          <div className={'modalFooter'}>\r\n            <div className={'d-flex mt-2 w-100'}>\r\n              <button className={'aceptBtn w-100'} onClick={() => { handleClose(); }}>Buscar</button>\r\n              <button className={'cancelBtn w-100'} onClick={ handleClose }>Cancelar</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={'darkBackground'} onClick={ handleClose }></div>\r\n    </>        \r\n    )\r\n}\r\n\r\nexport default memo(SearchItem);"],"names":["Input","memo","lazy","SearchItem","_ref","classType","Icon","items","queries","setQueries","className","setOpen","theme","useThemeContext","capitalizedClassType","useMemo","charAt","toUpperCase","slice","handleChange","useCallback","index","value","prev","newQueries","handleClose","_jsxs","_Fragment","children","_jsx","color","myColor","height","width","strokeWidth","placeholder","type","target","map","item","key","onClick"],"sourceRoot":""}