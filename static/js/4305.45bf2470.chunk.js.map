{"version":3,"file":"static/js/4305.45bf2470.chunk.js","mappings":"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","sources":["components/crud/CreateItem.js","helpers/fetchCreate.js","components/crud/views/CreateItems.js"],"sourcesContent":["// import { lazy, useState, useCallback, useMemo } from \"react\";\r\n// import { useAlertContext } from \"../../alerts/AlertContext.js\";\r\n// import { useCrudFactory } from \"../../hooks/useCrudFactory.js\";\r\n// import { fetchCreate } from \"../../helpers/fetchCreate.js\";\r\n\r\n// const Input = lazy(() => import(\"../forms/inputs/Input.js\"));\r\n// const Dropdown = lazy(() => import(\"../forms/dropdown/Dropdown.js\"));\r\n\r\n// export const CreateItem = ({ classType, Icon, isMenuOpen }) => {\r\n//   const { alert } = useAlertContext();\r\n//   const [openDropdownKey, setOpenDropdownKey] = useState(null);\r\n\r\n//   const objectHook = useCrudFactory({ classType });\r\n//   const { state, api:urlApi, resetState } = objectHook;\r\n\r\n//   const capitalizedClassType = useMemo( () => classType.charAt(0).toUpperCase() + classType.slice(1), [classType] );\r\n\r\n//   const handleCreate = useCallback(() => {\r\n//     // Construye el objeto a enviar\r\n//     const hasEmptyFields = state.some((property) => property.value === \"\");\r\n//     if (hasEmptyFields) { alert({ type: \"warning\", title: \"Debes ingresar todos los datos\", buttons: 1 }); return; }\r\n\r\n//     const itemPayload = state.reduce((item, property) => { item[property.key] = property.value; return item; }, {});\r\n\r\n//     const dataItem = JSON.stringify({ [classType]: itemPayload });\r\n\r\n//     fetchCreate(urlApi, dataItem).then(\r\n//       async (responseStatus) => {\r\n//         if (responseStatus >= 200 && responseStatus <= 299) {\r\n//           resetState();\r\n//           alert({ type: \"success\", title: \"Registro exitoso\", buttons: 1 });\r\n//         } \r\n//         else if (responseStatus >= 400 && responseStatus <= 499) { alert({ type: \"error\", title: \"Error en el envío de datos\", buttons: 1 }); } \r\n//         else if (responseStatus >= 500) { alert({ type: \"error\", title: \"Error en el servidor remoto\", buttons: 1 }); }\r\n//       },\r\n//       (error) => { alert({ type: \"error\", title: \"Error en el registro\", buttons: 1 }); console.error(\"Error en la creación:\", error); }\r\n//     );\r\n//   }, [state, urlApi, classType, alert, resetState]);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div className={`container-fluid mt-4 mt-sm-5 me-0 ps-4 ps-sm-5 pe-3 pe-sm-2 smooth ${isMenuOpen ? \"w-responsive\" : \"w-100\"}`} >\r\n//         <center><h5 className=\"century-gothic main-color fs-sm-2\">Registrar {capitalizedClassType}</h5></center>\r\n\r\n//         <div className=\"container-fluid mt-2 mt-sm-5 pe-0 pe-md-5 px-0 me-0 smooth\">\r\n//           {state.map((property) => (\r\n//             <div key={property.key} className=\"row\">\r\n//               {property.type === \"dropdown\" ? ( <Dropdown property={property} isOpen={openDropdownKey === property.key} onToggle={() => setOpenDropdownKey((prev) => prev === property.key ? null : property.key) } /> ) \r\n//                                             : ( <div className=\"col px-0\"><Input type={property.type} value={property.value} handleChange={property.handleChange} placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)} className=\"input form-control rounded border-muted border-1 text-muted text-center shadow-sm\" /></div> )\r\n//               }\r\n//             </div>\r\n//           ))}\r\n\r\n//           <div className=\"row mt-4 mt-sm-5\">\r\n//             <div className=\"col\">\r\n//               <button onClick={handleCreate}className=\"button bg-main-color text-white rounded border-0 py-3 w-50 shadow-sm\">Registrar <Icon /></button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CreateItem;\r\n\r\n\r\n\r\n\r\n\r\nimport { lazy, useState, useCallback, useMemo } from \"react\";\r\nimport { useAlertContext } from \"../../alerts/AlertContext.js\";\r\nimport { useCrudFactory } from \"../../hooks/useCrudFactory.js\";\r\nimport { fetchCreate } from \"../../helpers/fetchCreate.js\";\r\n\r\nconst Input = lazy(() => import(\"../forms/inputs/Input.js\"));\r\nconst Dropdown = lazy(() => import(\"../forms/dropdown/Dropdown.js\"));\r\n\r\nexport const CreateItem = ({ classType, Icon, isMenuOpen }) => {\r\n  const { alert } = useAlertContext();\r\n  const [openDropdownKey, setOpenDropdownKey] = useState(null);\r\n\r\n  const { state, api: urlApi, resetState } = useCrudFactory({ classType });\r\n\r\n  // Capitaliza el nombre del tipo de clase para mostrar en el título\r\n  const capitalizedClassType = useMemo(\r\n    () => classType.charAt(0).toUpperCase() + classType.slice(1),\r\n    [classType]\r\n  );\r\n\r\n  // Función para crear el nuevo ítem\r\n  const handleCreate = useCallback(() => {\r\n    const hasEmptyFields = state.some(property => property.value === \"\");\r\n    if (hasEmptyFields) {\r\n      alert({ type: \"warning\", title: \"Debes ingresar todos los datos\", buttons: 1 });\r\n      return;\r\n    }\r\n\r\n    const itemPayload = state.reduce((obj, property) => {\r\n      obj[property.key] = property.value;\r\n      return obj;\r\n    }, {});\r\n\r\n    const dataItem = JSON.stringify({ [classType]: itemPayload });\r\n\r\n    fetchCreate(urlApi, dataItem)\r\n      .then(async (responseStatus) => {\r\n        if (responseStatus >= 200 && responseStatus < 300) {\r\n          resetState();\r\n          alert({ type: \"success\", title: \"Registro exitoso\", buttons: 1 });\r\n        } else if (responseStatus >= 400 && responseStatus < 500) {\r\n          alert({ type: \"error\", title: \"Error en el envío de datos\", buttons: 1 });\r\n        } else if (responseStatus >= 500) {\r\n          alert({ type: \"error\", title: \"Error en el servidor remoto\", buttons: 1 });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error en la creación:\", error);\r\n        alert({ type: \"error\", title: \"Error en el registro\", buttons: 1 });\r\n      });\r\n  }, [state, urlApi, classType, alert, resetState]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={`container-fluid mt-4 mt-sm-5 me-0 ps-4 ps-sm-5 pe-3 pe-sm-2 smooth ${isMenuOpen ? \"w-responsive\" : \"w-100\"}`}>\r\n        <center>\r\n          <h5 className=\"century-gothic main-color fs-sm-2\">Registrar {capitalizedClassType}</h5>\r\n        </center>\r\n\r\n        <div className=\"container-fluid mt-2 mt-sm-5 pe-0 pe-md-5 px-0 me-0 smooth\">\r\n          {state.map((property) => (\r\n            <div key={property.key} className=\"row mb-3\">\r\n              {property.type === \"dropdown\" ? (\r\n                <Dropdown\r\n                  property={property}\r\n                  array={property.options} // Asegúrate de que cada propiedad tenga un array de opciones\r\n                  handleChange={property.handleChange}\r\n                  isOpen={openDropdownKey === property.key}\r\n                  onToggle={() =>\r\n                    setOpenDropdownKey((prev) => (prev === property.key ? null : property.key))\r\n                  }\r\n                />\r\n              ) : (\r\n                <div className=\"col px-0\">\r\n                  <Input\r\n                    type={property.type}\r\n                    value={property.value}\r\n                    handleChange={property.handleChange}\r\n                    placeholder={property.key.charAt(0).toUpperCase() + property.key.slice(1)}\r\n                    className=\"input form-control rounded border-muted border-1 text-muted text-center shadow-sm\"\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n\r\n          <div className=\"row mt-4 mt-sm-5\">\r\n            <div className=\"col d-flex justify-content-center\">\r\n              <button\r\n                onClick={handleCreate}\r\n                className=\"button bg-main-color text-white rounded border-0 py-3 w-50 shadow-sm d-flex align-items-center justify-content-center\"\r\n              >\r\n                Registrar <Icon className=\"ms-2\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateItem;\r\n","export const fetchCreate = async ( urlApi,dataApi ) => {\r\n  try {  \r\n    const response = await fetch(urlApi, {\r\n      method: \"POST\",\r\n      body: dataApi,\r\n      headers: { \"Content-type\": \"application/json\" }\r\n    });\r\n    response.json();\r\n    if(200 <= response.status && response.status <= 299){\r\n      console.log('POST ' + response.status + ' Registro exitoso')\r\n    } else if(400 <= response.status && response.status <= 499){\r\n      console.log('POST ' + response.status + ' Registro fallido: Error en el envío de datos')\r\n    } else if(500 <= response.status && response.status <= 599){\r\n      console.log('POST ' + response.status + ' Registro fallido: Error en el servidor remoto')\r\n    }\r\n  return response.status;\r\n  } catch (error) {\r\n      const errorMessage = error.toString().split(':')[1].trim();\r\n      if(errorMessage === 'Failed to fetch') { console.log('Registro fallido: No hay conexión con la base de datos') } \r\n      else { console.log('Registro fallido: ' + errorMessage) }     \r\n    };\r\n}","import { CreateItem } from '../CreateItem.js';\r\n\r\nexport const CreateItems = ({ classType, Icon, isMenuOpen }) => {\r\n  return ( <CreateItem classType={classType} Icon={Icon} isMenuOpen={isMenuOpen} /> )\r\n}\r\nexport default CreateItems;"],"names":["Input","lazy","Dropdown","CreateItem","_ref","classType","Icon","isMenuOpen","alert","useAlertContext","openDropdownKey","setOpenDropdownKey","useState","state","api","urlApi","resetState","useCrudFactory","capitalizedClassType","useMemo","charAt","toUpperCase","slice","handleCreate","useCallback","some","property","value","type","title","buttons","itemPayload","reduce","obj","key","dataItem","JSON","stringify","async","dataApi","response","fetch","method","body","headers","json","status","console","log","error","errorMessage","toString","split","trim","fetchCreate","then","responseStatus","catch","_jsx","className","children","_jsxs","map","array","options","handleChange","isOpen","onToggle","prev","placeholder","onClick","CreateItems"],"sourceRoot":""}